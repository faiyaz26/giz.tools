{
  "id": "cpp",
  "metadata": {
    "title": "C++",
    "date": "2021-06-01T11:51:44.000Z",
    "background": "bg-[#6d94c7]",
    "tags": null,
    "categories": [
      "Programming"
    ],
    "intro": "C++ quick reference cheat sheet that provides basic syntax and methods.\n",
    "plugins": [
      "copyCode",
      "runCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "hello.cpp",
          "level": 3,
          "cards": [
            {
              "title": "hello.cpp",
              "body": "```cpp\n#include <iostream>\n\nint main() {\n    std::cout << \"Hello CheatSheets\\n\";\n    return 0;\n}\n```",
              "footer": "Compiling and running\n```shell script\n$ g++ hello.cpp -o hello\n$ ./hello\nHello CheatSheets\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Variables",
          "level": 3,
          "cards": [
            {
              "title": "Variables",
              "body": "```cpp\nint number = 5;       // Integer\nfloat f = 0.95;       // Floating number\ndouble PI = 3.14159;  // Floating number\nchar yes = 'Y';       // Character\nstd::string s = \"ME\"; // String (text)\nbool isRight = true;  // Boolean\n\n// Constants\nconst float RATE = 0.8;\n```",
              "footer": "```cpp\nint age {25};         // Since C++11\nstd::cout << age;     // Print 25\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Primitive Data Types",
          "level": 3,
          "cards": [
            {
              "title": "Primitive Data Types",
              "body": "| Data Type | Size           | Range               |\n| --------- | -------------- | ------------------- |\n| `int`     | 4 bytes        | -2^31^ ^to^ 2^31^-1 |\n| `float`   | 4 bytes        | _N/A_               |\n| `double`  | 8 bytes        | _N/A_               |\n| `char`    | 1 byte         | -128 ^to^ 127       |\n| `bool`    | 1 byte         | true / false        |\n| `void`    | _N/A_          | _N/A_               |\n| `wchar_t` | 2 ^or^ 4 bytes | 1 wide character    |\n\n{.show-header}",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "User Input",
          "level": 3,
          "cards": [
            {
              "title": "User Input",
              "body": "```cpp\nint num;\n\nstd::cout << \"Type a number: \";\nstd::cin >> num;\n\nstd::cout << \"You entered \" << num;\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Swap",
          "level": 3,
          "cards": [
            {
              "title": "Swap",
              "body": "```cpp\nint a = 5, b = 10;\nstd::swap(a, b);\n\n// Outputs: a=10, b=5\nstd::cout << \"a=\" << a << \", b=\" << b;\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Comments",
          "level": 3,
          "cards": [
            {
              "title": "Comments",
              "body": "```cpp\n// A single one line comment in C++\n\n/* This is a multiple line comment\n   in C++ */\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "If statement",
          "level": 3,
          "cards": [
            {
              "title": "If statement",
              "body": "```cpp\nif (a == 10) {\n    // do something\n}\n```",
              "footer": "See: [Conditionals](#c-conditionals)",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Loops",
          "level": 3,
          "cards": [
            {
              "title": "Loops",
              "body": "```cpp\nfor (int i = 0; i < 10; i++) {\n    std::cout << i << \"\\n\";\n}\n```",
              "footer": "See: [Loops](#c-loops)",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Functions",
          "level": 3,
          "cards": [
            {
              "title": "Functions",
              "body": "```cpp\n#include <iostream>\n\nvoid hello(); // Declaring\n\nint main() {  // main function\n    hello();    // Calling\n}\n\nvoid hello() { // Defining\n    std::cout << \"Hello CheatSheets!\\n\";\n}\n```",
              "footer": "See: [Functions](#c-functions)",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "References",
          "level": 3,
          "cards": [
            {
              "title": "References",
              "body": "```cpp\nint i = 1;\nint& ri = i; // ri is a reference to i\n\nri = 2; // i is now changed to 2\nstd::cout << \"i=\" << i;\n\ni = 3;   // i is now changed to 3\nstd::cout << \"ri=\" << ri;\n```",
              "footer": "`ri` and `i` refer to the same memory location.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Namespaces",
          "level": 3,
          "cards": [
            {
              "title": "Namespaces",
              "body": "```cpp\n#include <iostream>\nnamespace ns1 {int val(){return 5;}}\nint main()\n{\n    std::cout << ns1::val();\n}\n```",
              "footer": "```cpp\nnamespace ns1 {int val(){return 5;}}\nusing namespace ns1;\nusing namespace std;\nint main()\n{\ncout << val();\n}\n```\nNamespaces allow global identifiers under a name",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "C++ Arrays",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Declaration",
          "level": 3,
          "cards": [
            {
              "title": "Declaration",
              "body": "```cpp\nstd::array<int, 3> marks; // Definition\nmarks[0] = 92;\nmarks[1] = 97;\nmarks[2] = 98;\n\n// Define and initialize\nstd::array<int, 3> = {92, 97, 98};\n\n// With empty members\nstd::array<int, 3> marks = {92, 97};\nstd::cout << marks[2]; // Outputs: 0\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Manipulation",
          "level": 3,
          "cards": [
            {
              "title": "Manipulation",
              "body": "```cpp\n┌─────┬─────┬─────┬─────┬─────┬─────┐\n| 92  | 97  | 98  | 99  | 98  | 94  |\n└─────┴─────┴─────┴─────┴─────┴─────┘\n   0     1     2     3     4     5\n```",
              "footer": "```cpp\nstd::array<int, 6> marks = {92, 97, 98, 99, 98, 94};\n// Print first element\nstd::cout << marks[0];\n// Change 2nd element to 99\nmarks[1] = 99;\n// Take input from the user\nstd::cin >> marks[2];\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Displaying",
          "level": 3,
          "cards": [
            {
              "title": "Displaying",
              "body": "```cpp\nchar ref[5] = {'R', 'e', 'f'};\n\n// Range based for loop\nfor (const int &n : ref) {\n    std::cout << std::string(1, n);\n}\n\n// Traditional for loop\nfor (int i = 0; i < sizeof(ref); ++i) {\n    std::cout << ref[i];\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Multidimensional",
          "level": 3,
          "cards": [
            {
              "title": "Multidimensional",
              "body": "```cpp\nj0   j1   j2   j3   j4   j5\n   ┌────┬────┬────┬────┬────┬────┐\ni0 | 1  | 2  | 3  | 4  | 5  | 6  |\n   ├────┼────┼────┼────┼────┼────┤\ni1 | 6  | 5  | 4  | 3  | 2  | 1  |\n   └────┴────┴────┴────┴────┴────┘\n```",
              "footer": "```cpp\nint x[2][6] = {\n{1,2,3,4,5,6}, {6,5,4,3,2,1}\n};\nfor (int i = 0; i < 2; ++i) {\nfor (int j = 0; j < 6; ++j) {\nstd::cout << x[i][j] << \" \";\n}\n}\n// Outputs: 1 2 3 4 5 6 6 5 4 3 2 1\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "C++ Conditionals",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "If Clause",
          "level": 3,
          "cards": [
            {
              "title": "If Clause",
              "body": "```cpp\nif (a == 10) {\n    // do something\n}\n```",
              "footer": "```cpp\nint number = 16;\nif (number % 2 == 0)\n{\nstd::cout << \"even\";\n}\nelse\n{\nstd::cout << \"odd\";\n}\n// Outputs: even\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Else if Statement",
          "level": 3,
          "cards": [
            {
              "title": "Else if Statement",
              "body": "```cpp\nint score = 99;\nif (score == 100) {\n    std::cout << \"Superb\";\n}\nelse if (score >= 90) {\n    std::cout << \"Excellent\";\n}\nelse if (score >= 80) {\n    std::cout << \"Very Good\";\n}\nelse if (score >= 70) {\n    std::cout << \"Good\";\n}\nelse if (score >= 60)\n    std::cout << \"OK\";\nelse\n    std::cout << \"What?\";\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Operators",
          "level": 3,
          "cards": [
            {
              "title": "Operators",
              "body": "",
              "footer": "#### Relational Operators\n\n|          |                              |\n| -------- | ---------------------------- |\n| `a == b` | a is equal to b              |\n| `a != b` | a is NOT equal to b          |\n| `a < b`  | a is less than b             |\n| `a > b`  | a is greater b               |\n| `a <= b` | a is less than or equal to b |\n| `a >= b` | a is greater or equal to b   |\n\n#### Assignment Operators\n\n| Example  | Equivalent to    |\n| -------- | ---------------- |\n| `a += b` | _Aka_ a = a + b  |\n| `a -= b` | _Aka_ a = a - b  |\n| `a *= b` | _Aka_ a = a \\* b |\n| `a /= b` | _Aka_ a = a / b  |\n| `a %= b` | _Aka_ a = a % b  |\n\n#### Logical Operators\n\n| Example                     | Meaning                |\n| --------------------------- | ---------------------- |\n| `exp1 && exp2`              | Both are true _(AND)_  |\n| <code>exp1 \\|\\| exp2</code> | Either is true _(OR)_  |\n| `!exp`                      | `exp` is false _(NOT)_ |\n\n#### Bitwise Operators\n\n| Operator            | Description             |\n| ------------------- | ----------------------- |\n| `a & b`             | Binary AND              |\n| <code>a \\| b</code> | Binary OR               |\n| `a ^ b`             | Binary XOR              |\n| `~ a`               | Binary One's Complement |\n| `a << b`            | Binary Shift Left       |\n| `a >> b`            | Binary Shift Right      |",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Ternary Operator",
          "level": 3,
          "cards": [
            {
              "title": "Ternary Operator",
              "body": "```\n┌── True ──┐\nResult = Condition ? Exp1 : Exp2;\n           └───── False ─────┘\n```",
              "footer": "```cpp\nint x = 3, y = 5, max;\nmax = (x > y) ? x : y;\n// Outputs: 5\nstd::cout << max << std::endl;\n```\n```cpp\nint x = 3, y = 5, max;\nif (x > y) {\nmax = x;\n} else {\nmax = y;\n}\n// Outputs: 5\nstd::cout << max << std::endl;\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Switch Statement",
          "level": 3,
          "cards": [
            {
              "title": "Switch Statement",
              "body": "```cpp\nint num = 2;\nswitch (num) {\n    case 0:\n        std::cout << \"Zero\";\n        break;\n    case 1:\n        std::cout << \"One\";\n        break;\n    case 2:\n        std::cout << \"Two\";\n        break;\n    case 3:\n        std::cout << \"Three\";\n        break;\n    default:\n        std::cout << \"What?\";\n        break;\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "C++ Loops",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "While",
          "level": 3,
          "cards": [
            {
              "title": "While",
              "body": "```cpp\nint i = 0;\nwhile (i < 6) {\n    std::cout << i++;\n}\n\n// Outputs: 012345\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Do-while",
          "level": 3,
          "cards": [
            {
              "title": "Do-while",
              "body": "```cpp\nint i = 1;\ndo {\n    std::cout << i++;\n} while (i <= 5);\n\n// Outputs: 12345\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Continue statements",
          "level": 3,
          "cards": [
            {
              "title": "Continue statements",
              "body": "```cpp\nfor (int i = 0; i < 10; i++) {\n    if (i % 2 == 0) {\n        continue;\n    }\n    std::cout << i;\n} // Outputs: 13579\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Infinite loop",
          "level": 3,
          "cards": [
            {
              "title": "Infinite loop",
              "body": "```cpp\nwhile (true) { // true or 1\n    std::cout << \"infinite loop\";\n}\n```",
              "footer": "```cpp\nfor (;;) {\nstd::cout << \"infinite loop\";\n}\n```\n```cpp\nfor(int i = 1; i > 0; i++) {\nstd::cout << \"infinite loop\";\n}\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "for_each (Since C++11)",
          "level": 3,
          "cards": [
            {
              "title": "for_each (Since C++11)",
              "body": "```cpp\n#include <iostream>\n#include <array>\n\nint main()\n{\n    auto print = [](int num) { std::cout << num << std::endl; };\n\n    std::array<int, 4> arr = {1, 2, 3, 4};\n    std::for_each(arr.begin(), arr.end(), print);\n    return 0;\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Range-based (Since C++11)",
          "level": 3,
          "cards": [
            {
              "title": "Range-based (Since C++11)",
              "body": "```cpp\nfor (int n : {1, 2, 3, 4, 5}) {\n    std::cout << n << \" \";\n}\n// Outputs: 1 2 3 4 5\n```",
              "footer": "```cpp\nstd::string hello = \"CheatSheets.zip\";\nfor (char c: hello)\n{\nstd::cout << c << \" \";\n}\n// Outputs: Q u i c k R e f . M E\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Break statements",
          "level": 3,
          "cards": [
            {
              "title": "Break statements",
              "body": "```cpp\nint password, times = 0;\nwhile (password != 1234) {\n    if (times++ >= 3) {\n        std::cout << \"Locked!\\n\";\n        break;\n    }\n    std::cout << \"Password: \";\n    std::cin >> password; // input\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Several variations",
          "level": 3,
          "cards": [
            {
              "title": "Several variations",
              "body": "```cpp\nfor (int i = 0, j = 2; i < 3; i++, j--){\n    std::cout << \"i=\" << i << \",\";\n    std::cout << \"j=\" << j << \";\";\n}\n// Outputs: i=0,j=2;i=1,j=1;i=2,j=0;\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "C++ Functions",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Arguments & Returns",
          "level": 3,
          "cards": [
            {
              "title": "Arguments & Returns",
              "body": "```cpp\n#include <iostream>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    std::cout << add(10, 20);\n}\n```",
              "footer": "`add` is a function taking 2 ints and returning int",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Overloading",
          "level": 3,
          "cards": [
            {
              "title": "Overloading",
              "body": "```cpp\nvoid fun(string a, string b) {\n    std::cout << a + \" \" + b;\n}\nvoid fun(string a) {\n    std::cout << a;\n}\nvoid fun(int a) {\n    std::cout << a;\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Built-in Functions",
          "level": 3,
          "cards": [
            {
              "title": "Built-in Functions",
              "body": "```cpp\n#include <iostream>\n#include <cmath> // import library\n\nint main() {\n    // sqrt() is from cmath\n    std::cout << sqrt(9);\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "C++ Classes & Objects {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Defining a Class",
          "level": 3,
          "cards": [
            {
              "title": "Defining a Class",
              "body": "```cpp\nclass MyClass {\n  public:             // Access specifier\n    int myNum;        // Attribute (int variable)\n    string myString;  // Attribute (string variable)\n};\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Creating an Object",
          "level": 3,
          "cards": [
            {
              "title": "Creating an Object",
              "body": "```cpp\nMyClass myObj;  // Create an object of MyClass\n\nmyObj.myNum = 15;          // Set the value of myNum to 15\nmyObj.myString = \"Hello\";  // Set the value of myString to \"Hello\"\n\ncout << myObj.myNum << endl;         // Output 15\ncout << myObj.myString << endl;      // Output \"Hello\"\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Constructors",
          "level": 3,
          "cards": [
            {
              "title": "Constructors",
              "body": "```cpp\nclass MyClass {\n  public:\n    int myNum;\n    string myString;\n    MyClass() {  // Constructor\n      myNum = 0;\n      myString = \"\";\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\n\ncout << myObj.myNum << endl;         // Output 0\ncout << myObj.myString << endl;      // Output \"\"\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Destructors",
          "level": 3,
          "cards": [
            {
              "title": "Destructors",
              "body": "```cpp\nclass MyClass {\n  public:\n    int myNum;\n    string myString;\n    MyClass() {  // Constructor\n      myNum = 0;\n      myString = \"\";\n    }\n    ~MyClass() {  // Destructor\n      cout << \"Object destroyed.\" << endl;\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\n\n// Code here...\n\n// Object is destroyed automatically when the program exits the scope\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Class Methods",
          "level": 3,
          "cards": [
            {
              "title": "Class Methods",
              "body": "```cpp\nclass MyClass {\n  public:\n    int myNum;\n    string myString;\n    void myMethod() {  // Method/function defined inside the class\n      cout << \"Hello World!\" << endl;\n    }\n};\n\nMyClass myObj;  // Create an object of MyClass\nmyObj.myMethod();  // Call the method\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Access Modifiers",
          "level": 3,
          "cards": [
            {
              "title": "Access Modifiers",
              "body": "```cpp\nclass MyClass {\n  public:     // Public access specifier\n    int x;    // Public attribute\n  private:    // Private access specifier\n    int y;    // Private attribute\n  protected:  // Protected access specifier\n    int z;    // Protected attribute\n};\n\nMyClass myObj;\nmyObj.x = 25;  // Allowed (public)\nmyObj.y = 50;  // Not allowed (private)\nmyObj.z = 75;  // Not allowed (protected)\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Getters and Setters",
          "level": 3,
          "cards": [
            {
              "title": "Getters and Setters",
              "body": "```cpp\nclass MyClass {\n  private:\n    int myNum;\n  public:\n    void setMyNum(int num) {  // Setter\n      myNum = num;\n    }\n    int getMyNum() {  // Getter\n      return myNum;\n    }\n};\n\nMyClass myObj;\nmyObj.setMyNum(15);  // Set the value of myNum to 15\ncout << myObj.getMyNum() << endl;  // Output 15\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Inheritance",
          "level": 3,
          "cards": [
            {
              "title": "Inheritance",
              "body": "```cpp\nclass Vehicle {\n  public:\n    string brand = \"Ford\";\n    void honk() {\n      cout << \"Tuut, tuut!\" << endl;\n    }\n};\n\nclass Car : public Vehicle {\n  public:\n    string model = \"Mustang\";\n};\n\nCar myCar;\nmyCar.honk();  // Output \"Tuut, tuut!\"\ncout << myCar.brand + \" \" + myCar.model << endl;  // Output \"Ford Mustang\"\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "C++ Preprocessor",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Preprocessor",
          "level": 3,
          "cards": [
            {
              "title": "Preprocessor",
              "body": "- [if](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [elif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [else](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [endif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifdef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifndef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [define](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [undef](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [include](https://en.cppreference.com/w/cpp/preprocessor/include)\n- [line](https://en.cppreference.com/w/cpp/preprocessor/line)\n- [error](https://en.cppreference.com/w/cpp/preprocessor/error)\n- [pragma](https://en.cppreference.com/w/cpp/preprocessor/impl)\n- [defined](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [\\_\\_has_include](https://en.cppreference.com/w/cpp/feature_test)\n- [\\_\\_has_cpp_attribute](https://en.cppreference.com/w/cpp/feature_test)\n- [export](https://en.cppreference.com/w/cpp/keyword/export)\n- [import](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/import&action=edit&redlink=1)\n- [module](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/module&action=edit&redlink=1)\n\n{.marker-none .cols-2}",
              "footer": "",
              "spanConfig": "row-span-3",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Includes",
          "level": 3,
          "cards": [
            {
              "title": "Includes",
              "body": "```cpp\n#include \"iostream\"\n#include <iostream>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Defines",
          "level": 3,
          "cards": [
            {
              "title": "Defines",
              "body": "```cpp\n#define FOO\n#define FOO \"hello\"\n\n#undef FOO\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "If",
          "level": 3,
          "cards": [
            {
              "title": "If",
              "body": "```cpp\n#ifdef DEBUG\n  console.log('hi');\n#elif defined VERBOSE\n  ...\n#else\n  ...\n#endif\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Error",
          "level": 3,
          "cards": [
            {
              "title": "Error",
              "body": "```cpp\n#if VERSION == 2.0\n  #error Unsupported\n  #warning Not really supported\n#endif\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Macro",
          "level": 3,
          "cards": [
            {
              "title": "Macro",
              "body": "```cpp\n#define DEG(x) ((x) * 57.29)\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Token concat",
          "level": 3,
          "cards": [
            {
              "title": "Token concat",
              "body": "```cpp\n#define DST(name) name##_s name##_t\nDST(object);   #=> object_s object_t;\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Stringification",
          "level": 3,
          "cards": [
            {
              "title": "Stringification",
              "body": "```cpp\n#define STR(name) #name\nchar * a = STR(object);   #=> char * a = \"object\";\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "file and line",
          "level": 3,
          "cards": [
            {
              "title": "file and line",
              "body": "```cpp\n#define LOG(msg) console.log(__FILE__, __LINE__, msg)\n#=> console.log(\"file.txt\", 3, \"hey\")\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Miscellaneous",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Escape Sequences",
          "level": 3,
          "cards": [
            {
              "title": "Escape Sequences",
              "body": "| Escape Sequences | Characters            |\n| ---------------- | --------------------- |\n| `\\b`             | Backspace             |\n| `\\f`             | Form feed             |\n| `\\n`             | Newline               |\n| `\\r`             | Return                |\n| `\\t`             | Horizontal tab        |\n| `\\v`             | Vertical tab          |\n| `\\\\`             | Backslash             |\n| `\\'`             | Single quotation mark |\n| `\\\"`             | Double quotation mark |\n| `\\?`             | Question mark         |\n| `\\0`             | Null Character        |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Keywords",
          "level": 3,
          "cards": [
            {
              "title": "Keywords",
              "body": "- [alignas](https://en.cppreference.com/w/cpp/keyword/alignas)\n- [alignof](https://en.cppreference.com/w/cpp/keyword/alignof)\n- [and](https://en.cppreference.com/w/cpp/keyword/and)\n- [and_eq](https://en.cppreference.com/w/cpp/keyword/and_eq)\n- [asm](https://en.cppreference.com/w/cpp/keyword/asm)\n- [atomic_cancel](https://en.cppreference.com/w/cpp/keyword/atomic_cancel)\n- [atomic_commit](https://en.cppreference.com/w/cpp/keyword/atomic_commit)\n- [atomic_noexcept](https://en.cppreference.com/w/cpp/keyword/atomic_noexcept)\n- [auto](https://en.cppreference.com/w/cpp/keyword/auto)\n- [bitand](https://en.cppreference.com/w/cpp/keyword/bitand)\n- [bitor](https://en.cppreference.com/w/cpp/keyword/bitor)\n- [bool](https://en.cppreference.com/w/cpp/keyword/bool)\n- [break](https://en.cppreference.com/w/cpp/keyword/break)\n- [case](https://en.cppreference.com/w/cpp/keyword/case)\n- [catch](https://en.cppreference.com/w/cpp/keyword/catch)\n- [char](https://en.cppreference.com/w/cpp/keyword/char)\n- [char8_t](https://en.cppreference.com/w/cpp/keyword/char8_t)\n- [char16_t](https://en.cppreference.com/w/cpp/keyword/char16_t)\n- [char32_t](https://en.cppreference.com/w/cpp/keyword/char32_t)\n- [class](https://en.cppreference.com/w/cpp/keyword/class)\n- [compl](https://en.cppreference.com/w/cpp/keyword/compl)\n- [concept](https://en.cppreference.com/w/cpp/keyword/concept)\n- [const](https://en.cppreference.com/w/cpp/keyword/const)\n- [consteval](https://en.cppreference.com/w/cpp/keyword/consteval)\n- [constexpr](https://en.cppreference.com/w/cpp/keyword/constexpr)\n- [constinit](https://en.cppreference.com/w/cpp/keyword/constinit)\n- [const_cast](https://en.cppreference.com/w/cpp/keyword/const_cast)\n- [continue](https://en.cppreference.com/w/cpp/keyword/continue)\n- [co_await](https://en.cppreference.com/w/cpp/keyword/co_await)\n- [co_return](https://en.cppreference.com/w/cpp/keyword/co_return)\n- [co_yield](https://en.cppreference.com/w/cpp/keyword/co_yield)\n- [decltype](https://en.cppreference.com/w/cpp/keyword/decltype)\n- [default](https://en.cppreference.com/w/cpp/keyword/default)\n- [delete](https://en.cppreference.com/w/cpp/keyword/delete)\n- [do](https://en.cppreference.com/w/cpp/keyword/do)\n- [double](https://en.cppreference.com/w/cpp/keyword/double)\n- [dynamic_cast](https://en.cppreference.com/w/cpp/keyword/dynamic_cast)\n- [else](https://en.cppreference.com/w/cpp/keyword/else)\n- [enum](https://en.cppreference.com/w/cpp/keyword/enum)\n- [explicit](https://en.cppreference.com/w/cpp/keyword/explicit)\n- [export](https://en.cppreference.com/w/cpp/keyword/export)\n- [extern](https://en.cppreference.com/w/cpp/keyword/extern)\n- [false](https://en.cppreference.com/w/cpp/keyword/false)\n- [float](https://en.cppreference.com/w/cpp/keyword/float)\n- [for](https://en.cppreference.com/w/cpp/keyword/for)\n- [friend](https://en.cppreference.com/w/cpp/keyword/friend)\n- [goto](https://en.cppreference.com/w/cpp/keyword/goto)\n- [if](https://en.cppreference.com/w/cpp/keyword/if)\n- [inline](https://en.cppreference.com/w/cpp/keyword/inline)\n- [int](https://en.cppreference.com/w/cpp/keyword/int)\n- [long](https://en.cppreference.com/w/cpp/keyword/long)\n- [mutable](https://en.cppreference.com/w/cpp/keyword/mutable)\n- [namespace](https://en.cppreference.com/w/cpp/keyword/namespace)\n- [new](https://en.cppreference.com/w/cpp/keyword/new)\n- [noexcept](https://en.cppreference.com/w/cpp/keyword/noexcept)\n- [not](https://en.cppreference.com/w/cpp/keyword/not)\n- [not_eq](https://en.cppreference.com/w/cpp/keyword/not_eq)\n- [nullptr](https://en.cppreference.com/w/cpp/keyword/nullptr)\n- [operator](https://en.cppreference.com/w/cpp/keyword/operator)\n- [or](https://en.cppreference.com/w/cpp/keyword/or)\n- [or_eq](https://en.cppreference.com/w/cpp/keyword/or_eq)\n- [private](https://en.cppreference.com/w/cpp/keyword/private)\n- [protected](https://en.cppreference.com/w/cpp/keyword/protected)\n- [public](https://en.cppreference.com/w/cpp/keyword/public)\n- [reflexpr](https://en.cppreference.com/w/cpp/keyword/reflexpr)\n- [register](https://en.cppreference.com/w/cpp/keyword/register)\n- [reinterpret_cast](https://en.cppreference.com/w/cpp/keyword/reinterpret_cast)\n- [requires](https://en.cppreference.com/w/cpp/keyword/requires)\n- [return](https://en.cppreference.com/w/cpp/language/return)\n- [short](https://en.cppreference.com/w/cpp/keyword/short)\n- [signed](https://en.cppreference.com/w/cpp/keyword/signed)\n- [sizeof](https://en.cppreference.com/w/cpp/keyword/sizeof)\n- [static](https://en.cppreference.com/w/cpp/keyword/static)\n- [static_assert](https://en.cppreference.com/w/cpp/keyword/static_assert)\n- [static_cast](https://en.cppreference.com/w/cpp/keyword/static_cast)\n- [struct](https://en.cppreference.com/w/cpp/keyword/struct)\n- [switch](https://en.cppreference.com/w/cpp/keyword/switch)\n- [synchronized](https://en.cppreference.com/w/cpp/keyword/synchronized)\n- [template](https://en.cppreference.com/w/cpp/keyword/template)\n- [this](https://en.cppreference.com/w/cpp/keyword/this)\n- [thread_local](https://en.cppreference.com/w/cpp/keyword/thread_local)\n- [throw](https://en.cppreference.com/w/cpp/keyword/throw)\n- [true](https://en.cppreference.com/w/cpp/keyword/true)\n- [try](https://en.cppreference.com/w/cpp/keyword/try)\n- [typedef](https://en.cppreference.com/w/cpp/keyword/typedef)\n- [typeid](https://en.cppreference.com/w/cpp/keyword/typeid)\n- [typename](https://en.cppreference.com/w/cpp/keyword/typename)\n- [union](https://en.cppreference.com/w/cpp/keyword/union)\n- [unsigned](https://en.cppreference.com/w/cpp/keyword/unsigned)\n- [using](https://en.cppreference.com/w/cpp/keyword/using)\n- [virtual](https://en.cppreference.com/w/cpp/keyword/virtual)\n- [void](https://en.cppreference.com/w/cpp/keyword/void)\n- [volatile](https://en.cppreference.com/w/cpp/keyword/volatile)\n- [wchar_t](https://en.cppreference.com/w/cpp/keyword/wchar_t)\n- [while](https://en.cppreference.com/w/cpp/keyword/while)\n- [xor](https://en.cppreference.com/w/cpp/keyword/xor)\n- [xor_eq](https://en.cppreference.com/w/cpp/keyword/xor_eq)\n- [final](https://en.cppreference.com/w/cpp/language/final)\n- [override](https://en.cppreference.com/w/cpp/language/override)\n- [transaction_safe](https://en.cppreference.com/w/cpp/language/transactional_memory)\n- [transaction_safe_dynamic](https://en.cppreference.com/w/cpp/language/transactional_memory) {.marker-none .cols-5}",
              "footer": "",
              "spanConfig": "col-span-2 .row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Preprocessor",
          "level": 3,
          "cards": [
            {
              "title": "Preprocessor",
              "body": "- [if](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [elif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [else](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [endif](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifdef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [ifndef](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [define](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [undef](https://en.cppreference.com/w/cpp/preprocessor/replace)\n- [include](https://en.cppreference.com/w/cpp/preprocessor/include)\n- [line](https://en.cppreference.com/w/cpp/preprocessor/line)\n- [error](https://en.cppreference.com/w/cpp/preprocessor/error)\n- [pragma](https://en.cppreference.com/w/cpp/preprocessor/impl)\n- [defined](https://en.cppreference.com/w/cpp/preprocessor/conditional)\n- [\\_\\_has_include](https://en.cppreference.com/w/cpp/feature_test)\n- [\\_\\_has_cpp_attribute](https://en.cppreference.com/w/cpp/feature_test)\n- [export](https://en.cppreference.com/w/cpp/keyword/export)\n- [import](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/import&action=edit&redlink=1)\n- [module](https://en.cppreference.com/mwiki/index.php?title=cpp/keyword/module&action=edit&redlink=1) {.marker-none\n  .cols-2}",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Also see",
      "level": 2,
      "cards": [
        {
          "title": "Also see",
          "body": "- [C++ Infographics & Cheat Sheets](https://hackingcpp.com/cpp/cheat_sheets.html) _(hackingcpp.com)_\n\n- [C++ reference](https://en.cppreference.com/w/) _(cppreference.com)_\n- [C++ Language Tutorials](http://www.cplusplus.com/doc/tutorial/) _(cplusplus.com)_",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    }
  ]
}