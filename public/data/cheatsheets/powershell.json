{
  "id": "powershell",
  "metadata": {
    "title": "PowerShell",
    "date": "2020-11-25T18:28:43.000Z",
    "background": "bg-[#397fe4]",
    "tags": [
      "script",
      "windows"
    ],
    "categories": [
      "Programming",
      "Operating System"
    ],
    "intro": "This is a quick reference cheat sheet to getting started with PowerShell scripting.",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Basic Commands",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Helper Commands",
          "level": 3,
          "cards": [
            {
              "title": "Helper Commands",
              "body": "```powershell\nGet-Module --ListAvailable\n```",
              "footer": "Lists available cmdlets and functions.\n```powershell\nGet-Command -Module ActiveDirectory\n```\nRetrieves help\n```powershell\nGet-Help <cmd>\nGet-Help <cmd> -Examples\nGet-Help -Name Get-Process -Parameter Id\n```\nLists aliases and their corresponding cmdlet names.\n```powershell\nGet-Alias | Select-Object Name, Definition\n```\n**Get-Member:** Displays the properties and methods of objects.\n```powershell\nGet-Process | Get-Member\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Object Manipulation",
          "level": 3,
          "cards": [
            {
              "title": "Object Manipulation",
              "body": "```powershell\nGet-Process | Select-Object Name, CPU\n```",
              "footer": "**Where-Object:** Filters objects based on specified conditions.\n```powershell\nGet-Service | Where-Object { $PSItem.Status -eq 'Running' }\nGet-Service | ? { $_.Status -eq 'Running' }\n```\n**Measure-Object:** Calculates statistics, like sum, average, and count, for object properties.\n```powershell\nGet-Process | Measure-Object -Property WorkingSet -Sum\n```\n**ForEach-Object:** Performs an operation on each object in a collection. (BEAWARE: Below command will prefix of\nfiles/folder in the current dir)\n```powershell\nGet-ChildItem | ForEach-Object { Rename-Item $_ -NewName \"Prefix_$_\" }\n```\n**Sort-Object:** Sorts objects by specified properties.\n```powershell\nGet-ChildItem | Sort-Object Length -Descending\n```\n**Format-Table:** Formats output as a table with specified columns.\n```powershell\nGet-Service | Format-Table -AutoSize  # ft alias\n```\n**Format-List:** Formats output as a list of properties and values.\n```powershell\nGet-Process | Format-List -Property Name, CPU  # fl alias\n```",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "FileSystem",
          "level": 3,
          "cards": [
            {
              "title": "FileSystem",
              "body": "```powershell\nNew-Item -path file.txt -type 'file' -value 'contents'\nNew-Item -path file.txt -type 'dir'\nCopy-Item <src> -destination <dest>\nMove-Item -path  <src> -destination <dest>\nRemove-Item <file>\nTest-Path <path>\nRename-Item -path <path> -newname <newname>\n\n# using .NET Base Class Library\n[System.IO.File]::WriteAllText('test.txt', '')\n[System.IO.File]::Delete('test.txt')\n\nGet-Content -Path \"test.txt\"\nGet-Process | Out-File -FilePath \"processes.txt\"# Output to file\nGet-Process | Export-Csv -Path \"processes.csv\"  # Output to csv\n$data = Import-Csv -Path \"data.csv\"             # Import from csv\n```",
              "footer": "",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "System Management",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Windows Management Instrumentation",
          "level": 3,
          "cards": [
            {
              "title": "Windows Management Instrumentation",
              "body": "```powershell\n# Retrieve BIOS information\nGet-CimInstance -ClassName Win32_BIOS\n# Retrieve information about locally connected physical disk devices\nGet-CimInstance -ClassName Win32_DiskDrive\n# Retrieve information about install physical memory (RAM)\nGet-CimInstance -ClassName Win32_PhysicalMemory\n# Retrieve information about installed network adapters (physical + virtual)\nGet-CimInstance -ClassName Win32_NetworkAdapter\n# Retrieve information about installed graphics / video card (GPU)\nGet-CimInstance -ClassName Win32_VideoController\n\n# List all the classNames\nGet-CimClass | Select-Object -ExpandProperty CimClassName\n# Explore the various WMI classes available in the root\\cimv2 namespace\nGet-CimClass -Namespace root\\cimv2\n# Explore the child WMI namespaces underneath the root\\cimv2 namespace\nGet-CimInstance -Namespace root -ClassName __NAMESPACE\n```",
              "footer": "",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Network Management",
          "level": 3,
          "cards": [
            {
              "title": "Network Management",
              "body": "```powershell\n# Test network connectivity to a remote host\nTest-Connection -ComputerName google.com\n\n# Retrieve network adapter information\nGet-NetAdapter\n\n# Retrieve IP address information\nGet-NetIPAddress\n\n# Retrieve routing table information\nGet-NetRoute\n\n# Test if a port is open on a remote host\nTest-NetConnection google.com -Port 80\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "User & Group Management",
          "level": 3,
          "cards": [
            {
              "title": "User & Group Management",
              "body": "```powershell\n# Retrieve local user account information\nGet-LocalUser\n\n# Create a new local user account\nNew-LocalUser -Name NewUser -Password (ConvertTo-SecureString \"Password123\" -AsPlainText -Force)\n\n# Remove a local user account\nRemove-LocalUser -Name UserToRemove\n\n# Retrieve local group information\nGet-LocalGroup\n\n# Add a member to a local group\nAdd-LocalGroupMember -Group Administrators -Member UserToAdd\n```",
              "footer": "",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Security & Permissions",
          "level": 3,
          "cards": [
            {
              "title": "Security & Permissions",
              "body": "```powershell\n# Retrieve access control lists for file/dir\nGet-Acl C:\\Path\\To\\File.txt\n\n# Set access control lists for a file/dir\nSet-Acl -Path C:\\Path\\To\\File.txt -AclObject $aclObject\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Registry Management",
          "level": 3,
          "cards": [
            {
              "title": "Registry Management",
              "body": "```powershell\n# Retrieve registry key values\nGet-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | Select DisplayName, DisplayVersion\n\n# Set registry key values\nSet-ItemProperty -Path \"HKLM:\\Software\\MyApp\" -Name \"SettingName\" -Value \"NewValue\"\n\n# Create a new registry key value\nNew-ItemProperty -Path \"HKCU:\\Software\\MyApp\" -Name \"NewSetting\" -Value \"NewValue\" -PropertyType String\n\n# Remove a registry key value\nRemove-ItemProperty -Path \"HKCU:\\Software\\MyApp\" -Name \"SettingToRemove\"\n\n# Check if a registry key exists\nTest-Path \"HKLM:\\Software\\MyApp\"\n```",
              "footer": "",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Scripting",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Variables",
          "level": 3,
          "cards": [
            {
              "title": "Variables",
              "body": "```powershell\n$var = 0\n[int] $var = 'Trevor'         # (throws an exception)\n[string] $var = 'Trevor'      # (doesn't throw an exception)\n$var.GetType()\n\n# Multiple Assigning\n$a,$b,$c = 'a','b','c'\n\n# Create an array\n$arrayvar = @('va1','va2')\n\n# Create dict\n$dict = @{k1 = 'test'; k2 = 'best'}\n```",
              "footer": "Variable Commands\n```powershell\nNew-Variable -Name FirstName -Value Trevor\nNew-Variable FirstName -Value Trevor -Option <ReadOnly/Constant>\nGet-Variable\nGet-Variable | ? { $PSItem.Options -contains 'constant' }\nGet-Variable | ? { $PSItem.Options -contains 'readonly' }\nRemove-Variable -Name firstname\nRemove-Variable -Name firstname -Force\n```\nVariable types int32, int64, string, bool",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Operators",
          "level": 3,
          "cards": [
            {
              "title": "Operators",
              "body": "```powershell\n# operators\n# (a <op> b)\n\n= , += / -= , ++ / --\n-eq / -ne , -lt / -gt , -le / -ge\n\n$FirstName = 'Trevor'\n$FirstName -like 'T*'\n$true; $false #bool true/false\n\n# ternary operator\n$FoodToEat = $BaconIsYummy ? 'bacon' : 'beets'\n\n# -notin or -in\n'Celery' -in @('Bacon', 'Sausage', 'Steak')\n\n# output: True\n5 -is [int32]\n\n# regex match, array can be use\n'Trevor' -match '^T\\w*'\n\n# Find multiple matches.\n$regex = [regex]'(\\w*)'\n$regex.Matches('this is test').Value\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Structure",
          "level": 3,
          "cards": [
            {
              "title": "Structure",
              "body": "",
              "footer": "#### I/O operation\n\n```powershell\n\"This displays a string\"\n\nWrite-Host \"color\" -ForegroundColor Red\n\n$age = Read-host \"Enter age\"\n\n$pwd = Read-host \"password\" -asSecureString\n\nClear-Host\n```\n\n#### Flow Controls\n\n```powershell\nIF(<#Condition#>){\n<#Commands#>}ELSEIF(){}ELSE{}\n\nSwitch($var){\n\t\"val1\"{<#Commands#>; break}\n    \"val2\"{<#Commands#>; break}\n}\n\nFor($ct=0;$ct -le 3;$ct++){}\n\nForEach($var in $arr){}\n\nwhile($var -ne 0){}\n\nDo{}While()\n\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Function / Modules",
          "level": 3,
          "cards": [
            {
              "title": "Function / Modules",
              "body": "",
              "footer": "#### Example 1\n\n```powershell\nfunction funcname{\n\n    [CmdletBinding()]\n\tparam(\n\t\t[Parameter(Mandatory)]\n\t\t[String]$user\n\t)\n\tWrite-Host \"welcome \" $user\n    return \"value\"\n}\n$var = funcname -user pcb\n```\n\n#### Example 2\n\n```powershell\nfunction Get-EvenNumbers {\n    [CmdletBinding()]\n    param (\n        [Parameter(ValueFromPipeline = $true)]\n        [int] $Number\n    )\n    begin {<#command#>}\n    process {\n        if ($Number % 2 -eq 0) {\n            Write-Output $Number\n        }\n    }\n    end {<#command#>}\n}\n1..10 | Get-EvenNumbers\n\n```\n\n#### Modules\n\n```powershell\n# PowerShell looks module in the path\n$env:PSModulePath\n\n# lists all modules installed on system\nGet-Module -ListAvailable\n# modules imported into current session\nGet-Module\n\nImport-Module <moduleName>\nRemove-Module <moduleName>\n\nFind-Module -Tag cloud\nFind-Module -Name ps*\n\n# Create an in-memory PowerShell module\nNew-Module -Name trevor -ScriptBlock {\n  function Add($a,$b) { $a + $b } }\n\n```",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Tips",
          "level": 3,
          "cards": [
            {
              "title": "Tips",
              "body": "```powershell\n\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Also see {.cols-1}",
      "level": 2,
      "cards": [
        {
          "title": "Also see {.cols-1}",
          "body": "- [Microsoft PowerShell](https://learn.microsoft.com/en-us/powershell/scripting/samples/sample-scripts-for-administration?view=powershell-7.3)\n  _(learn.microsoft.com)_",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    }
  ]
}