{
  "id": "numpy",
  "metadata": {
    "title": "Numpy",
    "date": "2020-12-14T18:28:43.000Z",
    "background": "bg-[#4f6fc3]",
    "tags": [
      "scientific",
      "computing"
    ],
    "categories": [
      "Python"
    ],
    "intro": "[NumPy](https://numpy.org/) is the fundamental package for scientific computing with Python. This cheat sheet is a quick reference for NumPy beginners.\n",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Introduction",
          "level": 3,
          "cards": [
            {
              "title": "Introduction",
              "body": "```python\nimport numpy as np\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Importing/exporting",
          "level": 3,
          "cards": [
            {
              "title": "Importing/exporting",
              "body": "| -                                          | -                     |\n| ------------------------------------------ | --------------------- |\n| `np.loadtxt('file.txt')`                   | From a text file      |\n| `np.genfromtxt('file.csv',delimiter=',')`  | From a CSV file       |\n| `np.savetxt('file.txt',arr,delimiter=' ')` | Writes to a text file |\n| `np.savetxt('file.csv',arr,delimiter=',')` | Writes to a CSV file  |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Creating Arrays",
          "level": 3,
          "cards": [
            {
              "title": "Creating Arrays",
              "body": "| -                                 | -                                                                 |\n| --------------------------------- | ----------------------------------------------------------------- |\n| `np.array([1,2,3])`               | One dimensional array                                             |\n| `np.array([(1,2,3),(4,5,6)])`     | Two dimensional array                                             |\n| `np.zeros(3)`                     | 1D array of length 3 all values 0                                 |\n| `np.ones((3,4))`                  | 3x4 array with all values 1                                       |\n| `np.eye(5)`                       | 5x5 array of 0 with 1 on diagonal (Identity matrix)               |\n| `np.linspace(0,100,6)`            | Array of 6 evenly divided values from 0 to 100                    |\n| `np.arange(0,10,3)`               | Array of values from 0 to less than 10 with step 3 (eg [0,3,6,9]) |\n| `np.full((2,3),8)`                | 2x3 array with all values 8                                       |\n| `np.random.rand(4,5)`             | 4x5 array of random floats between 0–1                            |\n| `np.random.rand(6,7)*100`         | 6x7 array of random floats between 0–100                          |\n| `np.random.randint(5,size=(2,3))` | 2x3 array with random ints between 0–4                            |",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Inspecting Properties",
          "level": 3,
          "cards": [
            {
              "title": "Inspecting Properties",
              "body": "| -                   | -                                        |\n| ------------------- | ---------------------------------------- |\n| `arr.size`          | Returns number of elements in arr        |\n| `arr.shape`         | Returns dimensions of arr (rows,columns) |\n| `arr.dtype`         | Returns type of elements in arr          |\n| `arr.astype(dtype)` | Convert arr elements to type dtype       |\n| `arr.tolist()`      | Convert arr to a Python list             |\n| `np.info(np.eye)`   | View documentation for np.eye            |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Copying/sorting/reshaping",
          "level": 3,
          "cards": [
            {
              "title": "Copying/sorting/reshaping",
              "body": "| -                     | -                                                       |\n| --------------------- | ------------------------------------------------------- |\n| `np.copy(arr)`        | Copies arr to new memory                                |\n| `arr.view(dtype)`     | Creates view of arr elements with type dtype            |\n| `arr.sort()`          | Sorts arr                                               |\n| `arr.sort(axis=0)`    | Sorts specific axis of arr                              |\n| `two_d_arr.flatten()` | Flattens 2D array two_d_arr to 1D                       |\n| `arr.T`               | Transposes arr (rows become columns and vice versa)     |\n| `arr.reshape(3,4)`    | Reshapes arr to 3 rows, 4 columns without changing data |\n| `arr.resize((5,6))`   | Changes arr shape to 5x6 and fills new values with 0    |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Adding/removing Elements",
          "level": 3,
          "cards": [
            {
              "title": "Adding/removing Elements",
              "body": "| -                         | -                                      |\n| ------------------------- | -------------------------------------- |\n| `np.append(arr,values)`   | Appends values to end of arr           |\n| `np.insert(arr,2,values)` | Inserts values into arr before index 2 |\n| `np.delete(arr,3,axis=0)` | Deletes row on index 3 of arr          |\n| `np.delete(arr,4,axis=1)` | Deletes column on index 4 of arr       |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Combining/splitting",
          "level": 3,
          "cards": [
            {
              "title": "Combining/splitting",
              "body": "| -                                    | -                                        |\n| ------------------------------------ | ---------------------------------------- |\n| `np.concatenate((arr1,arr2),axis=0)` | Adds arr2 as rows to the end of arr1     |\n| `np.concatenate((arr1,arr2),axis=1)` | Adds arr2 as columns to end of arr1      |\n| `np.split(arr,3)`                    | Splits arr into 3 sub-arrays             |\n| `np.hsplit(arr,5)`                   | Splits arr horizontally on the 5th index |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Indexing/slicing/subsetting",
          "level": 3,
          "cards": [
            {
              "title": "Indexing/slicing/subsetting",
              "body": "| -                     | -                                                                         |\n| --------------------- | ------------------------------------------------------------------------- |\n| `arr[5]`              | Returns the element at index 5                                            |\n| `arr[2,5]`            | Returns the 2D array element on index [2][5]                              |\n| `arr[1]=4`            | Assigns array element on index 1 the value 4                              |\n| `arr[1,3]=10`         | Assigns array element on index [1][3] the value 10                        |\n| `arr[0:3]`            | Returns the elements at indices 0,1,2 (On a 2D array: returns rows 0,1,2) |\n| `arr[0:3,4]`          | Returns the elements on rows 0,1,2 at column 4                            |\n| `arr[:2]`             | Returns the elements at indices 0,1 (On a 2D array: returns rows 0,1)     |\n| `arr[:,1]`            | Returns the elements at index 1 on all rows                               |\n| `arr<5`               | Returns an array with boolean values                                      |\n| `(arr1<3) & (arr2>5)` | Returns an array with boolean values                                      |\n| `~arr`                | Inverts a boolean array                                                   |\n| `arr[arr<5]`          | Returns array elements smaller than 5                                     |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Vector Math",
          "level": 3,
          "cards": [
            {
              "title": "Vector Math",
              "body": "| -                           | -                                                           |\n| --------------------------- | ----------------------------------------------------------- |\n| `np.add(arr1,arr2)`         | Elementwise add arr2 to arr1                                |\n| `np.subtract(arr1,arr2)`    | Elementwise subtract arr2 from arr1                         |\n| `np.multiply(arr1,arr2)`    | Elementwise multiply arr1 by arr2                           |\n| `np.divide(arr1,arr2)`      | Elementwise divide arr1 by arr2                             |\n| `np.power(arr1,arr2)`       | Elementwise raise arr1 raised to the power of arr2          |\n| `np.array_equal(arr1,arr2)` | Returns True if the arrays have the same elements and shape |\n| `np.sqrt(arr)`              | Square root of each element in the array                    |\n| `np.sin(arr)`               | Sine of each element in the array                           |\n| `np.log(arr)`               | Natural log of each element in the array                    |\n| `np.abs(arr)`               | Absolute value of each element in the array                 |\n| `np.ceil(arr)`              | Rounds up to the nearest int                                |\n| `np.floor(arr)`             | Rounds down to the nearest int                              |\n| `np.round(arr)`             | Rounds to the nearest int                                   |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Scalar Math",
          "level": 3,
          "cards": [
            {
              "title": "Scalar Math",
              "body": "| -                    | -                                                                    |\n| -------------------- | -------------------------------------------------------------------- |\n| `np.add(arr,1)`      | Add 1 to each array element                                          |\n| `np.subtract(arr,2)` | Subtract 2 from each array element                                   |\n| `np.multiply(arr,3)` | Multiply each array element by 3                                     |\n| `np.divide(arr,4)`   | Divide each array element by 4 (returns np.nan for division by zero) |\n| `np.power(arr,5)`    | Raise each array element to the 5th power                            |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Statistics",
          "level": 3,
          "cards": [
            {
              "title": "Statistics",
              "body": "| -                     | -                                               |\n| --------------------- | ----------------------------------------------- |\n| `np.mean(arr,axis=0)` | Returns mean along specific axis                |\n| `arr.sum()`           | Returns sum of arr                              |\n| `arr.min()`           | Returns minimum value of arr                    |\n| `arr.max(axis=0)`     | Returns maximum value of specific axis          |\n| `np.var(arr)`         | Returns the variance of array                   |\n| `np.std(arr,axis=1)`  | Returns the standard deviation of specific axis |\n| `arr.corrcoef()`      | Returns correlation coefficient of array        |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    }
  ]
}