{
  "id": "svelte",
  "metadata": {
    "title": "Svelte",
    "date": "2025-04-08T19:45:00.000Z",
    "background": "bg-[#FF3E00]",
    "tags": [
      "svelte",
      "web"
    ],
    "categories": [
      "Programming"
    ],
    "intro": "A Svelte cheat sheet with the most important concepts, functions, reactivity, and more. A complete quick reference for beginners, updated for Svelte 5.\n",
    "plugins": [
      "copyCode",
      "runCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Basic Syntax",
          "level": 3,
          "cards": [
            {
              "title": "Basic Syntax",
              "body": "```js\n<script>\n  let name = 'world';\n</script>\n\n<h1>Hello {name}!</h1>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Expressions",
          "level": 3,
          "cards": [
            {
              "title": "Expressions",
              "body": "```js\n<script>\n  let firstName = \"Zehan\";\n  let lastName = \"Khan\";\n\n  function fullName() {\n    return `${firstName} ${lastName}`;\n  }\n</script>\n\n<h1>Hello {fullName()}!</h1>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Attributes",
          "level": 3,
          "cards": [
            {
              "title": "Attributes",
              "body": "```js\n<script>\n  let avatarUrl = 'https://example.com/avatar.png';\n</script>\n\n<img src={avatarUrl} alt=\"Avatar\" />\n<button class=\"btn\">Click me</button>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Functions in Markup",
          "level": 3,
          "cards": [
            {
              "title": "Functions in Markup",
              "body": "```js\n<script>\n  function name() {\n    return \"Zehan\";\n  }\n</script>\n\n<h1>Hi {name()}!</h1>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Conditional Rendering",
          "level": 3,
          "cards": [
            {
              "title": "Conditional Rendering",
              "body": "```js\n<script>\n  let temperature = 24;\n  let city = \"New York\";\n</script>\n\n{#if temperature >= 20}\n  <p>It is {temperature}°C (Warm) in {city}</p>\n{:else}\n  <p>It is {temperature}°C in {city}</p>\n{/if}\n```",
              "footer": "Note: Svelte components must always return a root element or content.",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Components",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Functional Component",
          "level": 3,
          "cards": [
            {
              "title": "Functional Component",
              "body": "```js\n<script>\n  export let name = \"User\";\n</script>\n\n<div class=\"UserProfile\">\n  <div>Hello</div>\n  <div>{name}</div>\n</div>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Embed an internal Component",
          "level": 3,
          "cards": [
            {
              "title": "Embed an internal Component",
              "body": "```js\n<script>\n  import UserAvatar from './UserAvatar.svelte';\n</script>\n\n<div class=\"UserProfile\">\n  <UserAvatar />\n  <UserAvatar />\n</div>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Embed an external Component",
          "level": 3,
          "cards": [
            {
              "title": "Embed an external Component",
              "body": "```js\n<script>\n  import ComponentName from 'some-library';\n</script>\n\n<div class=\"UserProfile\">\n  <ComponentName />\n</div>\n```",
              "footer": "Note: External components should be installed via npm first.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Advanced Functional Components",
          "level": 3,
          "cards": [
            {
              "title": "Advanced Functional Components",
              "body": "```js\n<script>\n  export let firstName;\n  export let lastName;\n\n  function fullName() {\n    return `${firstName} ${lastName}`;\n  }\n</script>\n\n<p>{fullName()}</p>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Properties {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Passing Properties to a Component",
          "level": 3,
          "cards": [
            {
              "title": "Passing Properties to a Component",
              "body": "```js\n<Student firstName=\"Zehan\" lastName=\"Khan\" age={23} pro={true} />\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Assigning the Properties from a Component",
          "level": 3,
          "cards": [
            {
              "title": "Assigning the Properties from a Component",
              "body": "```js\n<script>\n  export let firstName;\n  export let lastName;\n  export let age;\n</script>\n\n<h1>{firstName} {lastName} is {age}.</h1>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "State {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Local State",
          "level": 3,
          "cards": [
            {
              "title": "Local State",
              "body": "```js\n<script>\n  let name = \"Zehan\";\n\n  function updateName() {\n    name = prompt(\"What is your name?\") || name;\n  }\n</script>\n\n<h1>{name}</h1>\n<button on:click={updateName}>Update name</button>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Events {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Event Listener",
          "level": 3,
          "cards": [
            {
              "title": "Event Listener",
              "body": "```js\n<script>\n  function handleClick(event) {\n    event.preventDefault();\n    alert(\"Hello World\");\n  }\n</script>\n\n<a href=\"#\" on:click|preventDefault={handleClick}>\n  Say Hi\n</a>\n```",
              "footer": "Note: The most common event listeners are `on:click` and `on:submit`.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Loops {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Looping through an Array",
          "level": 3,
          "cards": [
            {
              "title": "Looping through an Array",
              "body": "```js\n<script>\n  let elements = [\"one\", \"two\", \"three\"];\n</script>\n\n<ul>\n  {#each elements as value, index}\n    <li>{value}</li>\n  {/each}\n</ul>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Looping through an Array of Objects",
          "level": 3,
          "cards": [
            {
              "title": "Looping through an Array of Objects",
              "body": "```js\n<script>\n  let elements = [\n    { name: \"one\", value: 1 },\n    { name: \"two\", value: 2 },\n    { name: \"three\", value: 3 }\n  ];\n</script>\n\n<ul>\n  {#each elements as element, index}\n    <li>\n      The value for {element.name} is {element.value}\n    </li>\n  {/each}\n</ul>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Forms {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Form Example",
          "level": 3,
          "cards": [
            {
              "title": "Form Example",
              "body": "```js\n<script>\n  let username = \"\";\n  let password = \"\";\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    alert(`Logging in with ${username} and ${password}`);\n  }\n</script>\n\n<form on:submit={handleSubmit}>\n  <input type=\"text\" placeholder=\"Username\" bind:value={username} />\n  <input type=\"password\" placeholder=\"Password\" bind:value={password} />\n  <input type=\"submit\" value=\"Login\" />\n</form>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "CSS {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Scoped CSS",
          "level": 3,
          "cards": [
            {
              "title": "Scoped CSS",
              "body": "```js\n<style>\n  .student {\n    color: blue;\n  }\n</style>\n\n<div class=\"student\">Zehan Khan</div>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Fetching Data {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Fetching Data with onMount",
          "level": 3,
          "cards": [
            {
              "title": "Fetching Data with onMount",
              "body": "```js\n<script>\n  import { onMount } from 'svelte';\n  let notifications = [];\n  let loading = true;\n\n  onMount(async () => {\n    const res = await fetch(\"https://notifications.com\");\n    notifications = await res.json();\n    loading = false;\n  });\n</script>\n\n{#if loading}\n  <p>Loading notifications...</p>\n{:else}\n  <ul>\n    {#each notifications as note}\n      <li>{note.title}</li>\n    {/each}\n  </ul>\n{/if}\n```",
              "footer": "Note: Use `onMount` for side effects like API calls.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Lifecycle Hooks {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "onMount",
          "level": 3,
          "cards": [
            {
              "title": "onMount",
              "body": "```js\n<script>\n  import { onMount } from 'svelte';\n\n  onMount(() => {\n    console.log('Component mounted');\n  });\n</script>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "beforeUpdate",
          "level": 3,
          "cards": [
            {
              "title": "beforeUpdate",
              "body": "```js\n<script>\n  import { beforeUpdate } from 'svelte';\n\n  beforeUpdate(() => {\n    console.log('Before component updates');\n  });\n</script>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "afterUpdate",
          "level": 3,
          "cards": [
            {
              "title": "afterUpdate",
              "body": "```js\n<script>\n  import { afterUpdate } from 'svelte';\n\n  afterUpdate(() => {\n    console.log('After component updates');\n  });\n</script>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "onDestroy",
          "level": 3,
          "cards": [
            {
              "title": "onDestroy",
              "body": "```js\n<script>\n  import { onDestroy } from 'svelte';\n\n  onDestroy(() => {\n    console.log('Component destroyed');\n  });\n</script>\n```",
              "footer": "Note: Svelte lifecycle functions are similar to React Hooks, but they are imported individually and used directly in the\n`<script>` block.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "More Svelte Features {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Derived Store",
          "level": 3,
          "cards": [
            {
              "title": "Derived Store",
              "body": "```js\n// store.js\nimport { writable, derived } from 'svelte/store';\n\nexport const count = writable(0);\nexport const double = derived(count, ($count) => $count * 2);\n```",
              "footer": "```js\n// App.svelte\n<script>\nimport { count, double } from './store.js';\n</script>\n<p>Count: {$count}</p>\n<p>Double: {$double}</p>\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Readable Store",
          "level": 3,
          "cards": [
            {
              "title": "Readable Store",
              "body": "```js\nimport { readable } from 'svelte/store';\n\nexport const time = readable(new Date(), function start(set) {\n  const interval = setInterval(() => {\n    set(new Date());\n  }, 1000);\n\n  return function stop() {\n    clearInterval(interval);\n  };\n});\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Reactive Declarations",
          "level": 3,
          "cards": [
            {
              "title": "Reactive Declarations",
              "body": "```js\n<script>\n  let a = 2;\n  let b = 3;\n  $: sum = a + b;\n</script>\n\n<p>{sum}</p>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Reactive Statements with Side Effects",
          "level": 3,
          "cards": [
            {
              "title": "Reactive Statements with Side Effects",
              "body": "```js\n<script>let name = 'Zehan'; $: console.log('Name changed to', name);</script>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Bind to DOM Properties",
          "level": 3,
          "cards": [
            {
              "title": "Bind to DOM Properties",
              "body": "```js\n<script>\n  let text = '';\n</script>\n\n<textarea bind:value={text} />\n<p>{text.length} characters</p>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Bind Grouped Inputs (Radio, Checkbox)",
          "level": 3,
          "cards": [
            {
              "title": "Bind Grouped Inputs (Radio, Checkbox)",
              "body": "```js\n<script>\n  let selected = 'apple';\n</script>\n\n<label><input type=\"radio\" bind:group={selected} value=\"apple\" /> Apple</label>\n<label><input type=\"radio\" bind:group={selected} value=\"orange\" /> Orange</label>\n<p>Selected: {selected}</p>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Class and Style Directives",
          "level": 3,
          "cards": [
            {
              "title": "Class and Style Directives",
              "body": "```js\n<script>\n  let isActive = true;\n</script>\n\n<div class:active={isActive}>Toggle me</div>\n```",
              "footer": "```js\n<script>\nlet size = 16;\n</script>\n<p style:font-size={`${size}px`}>Resizable text</p>\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Await Blocks",
          "level": 3,
          "cards": [
            {
              "title": "Await Blocks",
              "body": "```js\n<script>\n  let userPromise = fetch('https://jsonplaceholder.typicode.com/users/1')\n    .then(res => res.json());\n</script>\n\n{#await userPromise}\n  <p>Loading...</p>\n{:then user}\n  <p>{user.name}</p>\n{:catch error}\n  <p>Error: {error.message}</p>\n{/await}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "SSR with SvelteKit (Basic Example)",
          "level": 3,
          "cards": [
            {
              "title": "SSR with SvelteKit (Basic Example)",
              "body": "```js\n// +page.server.js\nexport async function load({ fetch }) {\n  const res = await fetch('/api/data');\n  const data = await res.json();\n  return { data };\n}\n```",
              "footer": "```js\n// +page.svelte\n<script>\nexport let data;\n</script>\n<h1>{data.title}</h1>\n```\nNote: Requires SvelteKit setup for SSR routes.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    }
  ]
}