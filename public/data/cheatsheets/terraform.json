{
  "id": "terraform",
  "metadata": {
    "title": "Terraform",
    "date": "2024-4-18",
    "background": "bg-[#7345b6]",
    "tags": [
      "container",
      "virtual"
    ],
    "categories": [
      "Programming"
    ],
    "intro": "This is a quick reference cheat sheet for [Terraform](https://docs.docker.com/get-started/).\n",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "HCL Syntax: {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Variable Types",
          "level": 3,
          "cards": [
            {
              "title": "Variable Types",
              "body": "```\nvariable \"<VAR NAME>\" {\n    description = \"<DESCRIPTION OF THE VAR>\"\n    type        = <VAR TYPE>\n    default     = <DEFAULT VALUE>\n}\n\n# type string\nvariable \"aws_region\" {\n    description = \"AWS Region\"\n    type        = string\n    default     = \"us-east-1\"\n}\n\n# type list(string)\nvariable \"azs\" {\n    description = \"AZs in the Region\"\n    type        = list(string)\n    default     = [ \"us-east-1a\", \"us-east-1b\", \"us-east-1c\"]\n}\n\n# type map\nvariable \"amis\" {\n    type = map(string)\n    default = {\n      \"eu-west-1\" = \"ami-0fdke15151513145\",\n      \"us-east-1\" = \"ami-0d17359173587519\"\n    }\n}\n\n# type object\nvariable \"egress_dsg\" {\n    type = object({\n        from_port = number\n        to_port = number\n        protocol = string\n        cidr_blocks = list(string)\n    })\n    default = {\n     from_port = 0,\n     to_port = 65365,\n     protocol = \"tcp\",\n     cidr_blocks = [\"100.0.0.0/16\", \"200.0.0.0/16\", \"0.0.0.0/0\"]\n    }\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Meta-Arguments",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Loops",
          "level": 3,
          "cards": [
            {
              "title": "Loops",
              "body": "```\n# creating multiple EC2 instances using count\nresource \"aws_instance\" \"server\" {\n  ami = \"ami-06ec8443c2a35b0ba\"\n  instance_type = \"t2.micro\"\n  count = 3  # creating 3 resources\n}\n\n# declaring a variable\nvariable \"users\" {\n  type = list(string)\n  default = [\"demo-user\", \"admin1\", \"john\"]\n}\n\n# creating IAM users using for_each\nresource \"aws_iam_user\" \"test\" {\n  for_each = toset(var.users) # converts a list to a set\n  name = each.key\n}\n\n# A for expression creates a complex type value by transforming another complex type value.\nvariable \"names\" {\n    type = list\n    default = [\"som\", \"john\", \"mary\"]\n}\n\noutput \"show_names\" {\n    # similar to Python's list comprehension\n    value = [for n in var.names : upper(n)]\n}\n\noutput \"short_upper_names\" {\n  # filter the resulting list by specifying a condition:\n  value = [for name in var.names : upper(name) if length(name) > 7]\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Splat",
          "level": 3,
          "cards": [
            {
              "title": "Splat",
              "body": "```\n# Launch an EC2 instance\nresource \"aws_instance\" \"server\" {\n  ami = \"ami-05cafdf7c9f772ad2\"\n  instance_type = \"t2.micro\"\n  count = 3\n}\n\noutput \"private_addresses\"{\n  value = aws_instance.server[*].private_ip  # splat expression\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "depends_on",
          "level": 3,
          "cards": [
            {
              "title": "depends_on",
              "body": "```\nresource \"aws_iam_role_policy\" \"example\" {\n    name = \"example\"\n    role = \"s3 access\"\n    policy = jsonencode({\n      \"Statement\" = [{\n        \"Action\" = \"s3:*\",\n        \"Effect\" = \"Allow\",\n      }],\n    })\n}\n\nresource \"aws_instance\" \"my_server\" {\n    ami  = \"ami-a255235\"\n    instance_type = \"t2.micro\"\n\n    iam_instance_profile = aws_iam_instance_profile.my_server\n\n    depends_on = [\n      aws_iam_role_policy.example,\n    ]\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "lifecycle",
          "level": 3,
          "cards": [
            {
              "title": "lifecycle",
              "body": "```\nresources \"aws_instance\" \"server\" {\n  ami           = \"ami-a1b3414\"\n  instance_type = \"t2.micro\"\n\n  lifecycle {\n    create_before_destroy = true\n    ignore_changes = [\n      # Some resources have metadata\n      # modified automatically outside of TF\n\n      tags\n    ]\n  }\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Conditionals",
          "level": 3,
          "cards": [
            {
              "title": "Conditionals",
              "body": "`condition ? true_val : false_val`",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Built-In functions",
          "level": 3,
          "cards": [
            {
              "title": "Built-In functions",
              "body": "| Function                                   | Result                  |\n| ------------------------------------------ | ----------------------- |\n| `max(5, 10, 9)`                            | 12                      |\n| `min(5, 10, 9)`                            | 5                       |\n| `format(\"There are %d servers\", 4)`        | There are 4 lights      |\n| `join(\",\" [\"foo\", \"bar\", \"baz\"])`          | foo,bar,baz             |\n| `split(\",\", \"foo,bar,baz\")`                | `[\"foo\", \"bar\", \"baz\"]` |\n| `replace(\"hi world\", \"/w.*d/\", \"mom\"`      | hi mom                  |\n| `substr(\"hello world\", 1, 4)`              | ello                    |\n| `lookup({a=\"lol\", b=\"sad\"}, \"a\", \"what?\")` | lol                     |\n| `lookup({a=\"lol\", b=\"sad\"}, \"c\", \"what?\")` | what?                   |\n| `slice([\"a\", \"b\", \"c\", \"d\"], 1, 3)`        | `[\"b\", \"c\"]`            |\n| `timestamp()`                              | \"2022-04-02T05:52:48Z\"  |\n| `cidr(\"10.1.2.240/28\", 1)`                 | 10.1.2.241              |\n| `cidr(\"10.1.2.240/28\", 14)`                | 10.1.2.254              |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Provider block",
          "level": 3,
          "cards": [
            {
              "title": "Provider block",
              "body": "```\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Additional provider config reference as `aws.west`.\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Requiring Providers",
          "level": 3,
          "cards": [
            {
              "title": "Requiring Providers",
              "body": "```\nterraform {\n\n  # required_providers block specifies source and version\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\" # where to find the provider\n      version = \"5.8.0\" # which version of the provider is needed for this config\n    }\n  }\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Locals block",
          "level": 3,
          "cards": [
            {
              "title": "Locals block",
              "body": "```\nlocals {\n  service_name = \"forum\"\n  owner        = \"Community Team\"\n}\n\n# once local declared you can reference it\nlocals {\n  common_tags = {\n    Service = local.service_name\n    Owner   = local.owner\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Output block",
          "level": 3,
          "cards": [
            {
              "title": "Output block",
              "body": "```\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n\n  # The EC2 instance must have an encrypted root volume.\n  precondition {\n    condition     = data.aws_ebs_volume.example.encrypted\n    error_message = \"The server's root volume is not encrypted.\"\n  }\n\n  # output can be marked as containing sensitive\n  sensitive = true # output can be marked as containing sensitive\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Data block",
          "level": 3,
          "cards": [
            {
              "title": "Data block",
              "body": "```\ndata \"aws_ami\" \"example\" {\n  most_recent = true\n\n  owners = [\"self\"]\n  tags = {\n    Name   = \"app-server\"\n    Tested = \"true\"\n  }\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Modules",
          "level": 3,
          "cards": [
            {
              "title": "Modules",
              "body": "```\nmodule \"myec2\" {\n  source = \"../modules/ec2\"\n\n  # module inputs\n  ami_id = var.ami_id\n  instance_type = var.instance_type\n  servers = var.servers\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Backends",
          "level": 3,
          "cards": [
            {
              "title": "Backends",
              "body": "```\nterraform {\n  backend \"remote\" {\n    organization = \"example_corp\"\n\n    workspaces {\n      name = \"my-app-prod\"\n    }\n  }\n}\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Resource Addressing",
          "level": 3,
          "cards": [
            {
              "title": "Resource Addressing",
              "body": "| Example                                           | Description             |\n| ------------------------------------------------- | ----------------------- |\n| `[module path][resource info`                     | Resource path syntax    |\n| `module.<MODULE_PATH>[optional] module index`     | Module path syntax      |\n| `resource_type.user_defined_name[optional index]` | Resource spec syntax    |\n| `<RESOURCE_TYPE>.<NAME>`                          | List all images         |\n| `var.<NAME>`                                      | Input Variable          |\n| `local.<NAME>`                                    | Locals                  |\n| `module.<MODULE_NAME>`                            | Child module outputs    |\n| `data.<DATA TYPE>.<NAME>`                         | Data blocks             |\n| `path.module`                                     | Location of expresssion |\n| `path.root`                                       | Root Module location    |\n| `terraform.workspace`                             | Current workspace       |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Terraform CLI",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Initialization",
          "level": 3,
          "cards": [
            {
              "title": "Initialization",
              "body": "```sh\nterraform init [options]\n\n    -upgrade            # Install latest module & provider versions\n    -reconfigure        # reconfigure backend, ignoring any saved config\n    -backend=false      # Disable backend & use previous Initialization\n    -migrate-state      # reconfigure backend & attempt to migrate any existing state\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Planning",
          "level": 3,
          "cards": [
            {
              "title": "Planning",
              "body": "```sh\nterraform plan [options]\n\n    -var 'user=john'    # set value for input vars in the root module of config\n    -var-file=filename  # load var values from the given file\n    -input=true         # ask for input for vars if not directly set\n    -out=path           # write a plan file to given path. can be used as input for \"apply\"\n    -refresh-only       # verifies remote object consistency without proposing actions to undo changes done outside TF\n    -destroy            # create plan to destroy all objects currenly managed\n    -target=resource    # target planning to given resouce & its dependencies only.\n\nterraform plan -refresh-only # updates state to match changes made outside of TF. Good for drift detection\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Validation",
          "level": 3,
          "cards": [
            {
              "title": "Validation",
              "body": "```sh\nterraform validate      # Validates the config files for errors\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Apply",
          "level": 3,
          "cards": [
            {
              "title": "Apply",
              "body": "```sh\nterraform apply [options]\n\n    -auto-approve       # skip interactive approval of plan before applying\n    -replace            # force replacement of a particular resource instance\n    -var 'foo=bar'      # set a value for input vars in the root module of config\n    -var-file=filename  # load var values from the given file\n    -parallelism=n      # limit the no of concurrent operations. Default=10\n\nterraform apply -auto-approve var-file=web-dev.tfvars\nterraform apply -replace=\"aws_instance.server\"\nterraform plan -refresh-only # Updates statefile to accept changes made manually.\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Destroy",
          "level": 3,
          "cards": [
            {
              "title": "Destroy",
              "body": "```sh\nterraform destroy [options]\n\n    -auto-approve        # skip interactive approval before destroying\n    -target              # limits destroy to only given resource & its dependencies\n\nterraform destroy -target aws_vpc.my_vpc -auto-approve\n```",
              "footer": "Miscellaneous\n```sh\nterraform state show aws_instance.my_vm\nterraform state pull > my_terraform.tfstate\nterraform state mv aws_iam_role.my_ssm_role\nterraform state list\nterraform state rm aws_instance.my_server\nterraform import aws_instance.new_server i-243abc\nsudo apt install graphviz\nterraform graph | dot -Tpng > graph.png\n```\nLogging\nlog levels = TRACE > DEBUG > INFO > WARN > ERROR\n```sh\nexport TF_LOG_CORE=TRACE     # enable core logging\nexport TF_LOG_PROVIDER=TRACE # enable provider logging\nexport TF_LOG_PATH=logs.txt  # to persist logs\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Also See",
      "level": 2,
      "cards": [
        {
          "title": "Also See",
          "body": "- [Docs](https://developer.hashicorp.com/terraform/language)\n- [Good FCC Article](https://www.freecodecamp.org/news/terraform-certified-associate-003-study-notes/)",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    }
  ]
}