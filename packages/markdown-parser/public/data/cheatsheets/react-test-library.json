{
  "id": "react-test-library",
  "metadata": {
    "title": "React Testing Library Cheat Sheet",
    "date": "2022-09-09T00:00:00.000Z",
    "background": "bg-blue-500",
    "tags": [
      "react",
      "testing",
      "javascript",
      "cheatsheet"
    ],
    "categories": [
      "Testing"
    ],
    "intro": "When it comes to testing React apps manually, we can either choose to render individual component trees in a simplified test environment or run the complete app in a realistic browser environment (end-to-end testing). But for automated tests, React Testing Library (RTL) is recommended for its user-centric approach and maintainability.\n",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Introduction",
      "level": 2,
      "cards": [
        {
          "title": "Introduction",
          "body": "React Testing Library is built on top of DOM Testing Library to test React components by querying and interacting with real DOM nodes, avoiding reliance on implementation details.",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    },
    {
      "title": "Basic level",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "1. Purpose & Solution",
          "level": 3,
          "cards": [
            {
              "title": "1. Purpose & Solution",
              "body": "RTL addresses maintainability by focusing on user-visible behavior:\n\n- Tests run in actual DOM nodes.\n- Queries mirror user interactions.\n- `data-testid` as an escape hatch when needed.\n- Encourages accessibility.",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "2. A basic component render test",
          "level": 3,
          "cards": [
            {
              "title": "2. A basic component render test",
              "body": "```js\nconst title = 'Hello, World!';\n\nfunction App() {\n  return <div>{title}</div>;\n}\n\nexport default App;\n```",
              "footer": "**Test (App.test.js):**\n```js\nimport { render } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\ntest('renders App component', () => {\nrender(<App />);\n});\n});\n```\nAdd debug to inspect output:\n```js\nimport { render, screen } from '@testing-library/react';\nimport App from './App';\ndescribe('App', () => {\ntest('renders App component', () => {\nrender(<App />);\nscreen.debug();\n});\n});\n```\nOutput in console:\n```html\n<body>\n<div>\n<div>Hello, World!</div>\n</div>\n</body>\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "3. Why use RTL vs Enzyme?",
          "level": 3,
          "cards": [
            {
              "title": "3. Why use RTL vs Enzyme?",
              "body": "1. Tests based on user interactions, not internal APIs.\n2. Improves maintainability after refactors.\n3. Intuitive syntax (`getByText`, `getByAltText`, etc.).",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "4. Queries in RTL",
          "level": 3,
          "cards": [
            {
              "title": "4. Queries in RTL",
              "body": "```js\nimport { render, screen } from '@testing-library/react';\n\ntest('should show login form', () => {\n  render(<Login />);\n  const input = screen.getByLabelText('Username');\n  // events & assertions\n});\n```",
              "footer": "**Single element queries:**\n- `getBy*`: throws if none found\n- `queryBy*`: returns null if none\n- `findBy*`: async Promise\n**Multiple elements queries:**\n- `getAllBy*`: throws if none\n- `queryAllBy*`: returns \\[] if none\n- `findAllBy*`: async Promise array",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "5. Component tree testing level",
          "level": 3,
          "cards": [
            {
              "title": "5. Component tree testing level",
              "body": "- Test at user interaction level, not per individual child component unless needed.",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Intermediate level",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "1. Jest vs RTL",
          "level": 3,
          "cards": [
            {
              "title": "1. Jest vs RTL",
              "body": "- **Jest**: Test runner & assertion library (`describe`, `test`, `expect`).\n- **RTL**: DOM utilities for React; works within Jest (or other runners).",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "2. Mocking with MSW",
          "level": 3,
          "cards": [
            {
              "title": "2. Mocking with MSW",
              "body": "```js\n// fetch.test.jsx\nimport React from 'react';\nimport { rest } from 'msw';\nimport { setupServer } from 'msw/node';\nimport { render, fireEvent, waitFor, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport Fetch from '../fetch';\n\nconst server = setupServer(\n  rest.get('/greeting', (req, res, ctx) =>\n    res(ctx.json({ greeting: 'hello there' }))\n  )\n);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\ntest('loads and displays greeting', async () => {\n  render(<Fetch url=\"/greeting\" />);\n  fireEvent.click(screen.getByText('Load Greeting'));\n  await waitFor(() => screen.getByRole('heading'));\n  expect(screen.getByRole('heading')).toHaveTextContent('hello there');\n  expect(screen.getByRole('button')).toBeDisabled();\n});\n\ntest('handles server error', async () => {\n  server.use(rest.get('/greeting', (req, res, ctx) => res(ctx.status(500))));\n  render(<Fetch url=\"/greeting\" />);\n  fireEvent.click(screen.getByText('Load Greeting'));\n  await waitFor(() => screen.getByRole('alert'));\n  expect(screen.getByRole('alert')).toHaveTextContent('Oops, failed to fetch!');\n  expect(screen.getByRole('button')).not.toBeDisabled();\n});\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "3. `render` options",
          "level": 3,
          "cards": [
            {
              "title": "3. `render` options",
              "body": "```js\nimport { render } from '@testing-library/react';\nimport '@testing-library/jest-dom';\n\ntest('renders a message', () => {\n  const table = document.createElement('table');\n  const { container } = render(<TableBody {...props} />, {\n    container: document.body.appendChild(table),\n    baseElement: document.body,\n    hydrate: true,\n    legacyRoot: true,\n    queries: {\n      /* custom queries */\n    }\n  });\n  expect(container).toBeInTheDocument();\n});\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "4. `renderHook` usage",
          "level": 3,
          "cards": [
            {
              "title": "4. `renderHook` usage",
              "body": "```js\nimport { renderHook } from '@testing-library/react';\n\ntest('returns logged in user', () => {\n  const { result, rerender } = renderHook(\n    ({ name } = {}) => useLoggedInUser(name),\n    { initialProps: { name: 'Alice' } }\n  );\n  expect(result.current).toEqual({ name: 'Alice' });\n  rerender({ name: 'Bob' });\n  expect(result.current).toEqual({ name: 'Bob' });\n});\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Advanced Level",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "1. Adding custom queries",
          "level": 3,
          "cards": [
            {
              "title": "1. Adding custom queries",
              "body": "```js\nconst dom = require('@testing-library/dom');\nconst { queryHelpers, buildQueries } = require('@testing-library/react');\n\n// Override testId attribute\nexport const queryByTestId = queryHelpers.queryByAttribute.bind(\n  null,\n  'data-test-id'\n);\nexport const queryAllByTestId = queryHelpers.queryAllByAttribute.bind(\n  null,\n  'data-test-id'\n);\nexport function getAllByTestId(container, id, ...rest) {\n  const els = queryAllByTestId(container, id, ...rest);\n  if (!els.length)\n    throw queryHelpers.getElementError(\n      `No element with [data-test-id=\"${id}\"]`,\n      container\n    );\n  return els;\n}\nexport function getByTestId(container, id, ...rest) {\n  const els = getAllByTestId(container, id, ...rest);\n  if (els.length > 1)\n    throw queryHelpers.getElementError(\n      `Multiple elements with [data-test-id=\"${id}\"]`,\n      container\n    );\n  return els[0];\n}\n```",
              "footer": "Or using `buildQueries`:\n```js\nconst queryAllByDataCy = (...args) =>\nqueryHelpers.queryAllByAttribute('data-cy', ...args);\nconst [\nqueryByDataCy,\ngetAllByDataCy,\ngetByDataCy,\nfindAllByDataCy,\nfindByDataCy\n] = buildQueries(\nqueryAllByDataCy,\n(c, v) => `Found multiple elements with data-cy=\"${v}\"`,\n(c, v) => `Unable to find element with data-cy=\"${v}\"`\n);\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "2. Skipping auto cleanup",
          "level": 3,
          "cards": [
            {
              "title": "2. Skipping auto cleanup",
              "body": "- Via CLI: `cross-env RTL_SKIP_AUTO_CLEANUP=true jest`\n- Or add to Jest `setupFiles`: `import '@testing-library/react/dont-cleanup-after-each';`",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "3. Migrating from Enzyme",
          "level": 3,
          "cards": [
            {
              "title": "3. Migrating from Enzyme",
              "body": "1. Install RTL & jest-dom.\n2. Replace `shallow`/`mount` with `render` + `screen`.\n3. Migrate tests incrementally.",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "4. Querying within elements",
          "level": 3,
          "cards": [
            {
              "title": "4. Querying within elements",
              "body": "```js\nimport { render, within } from '@testing-library/react';\n\nconst { getByText } = render(<MyComponent />);\nconst section = getByText('messages');\nconst hello = within(section).getByText('hello');\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "5. Integration testing",
          "level": 3,
          "cards": [
            {
              "title": "5. Integration testing",
              "body": "```js\nimport { render, cleanup, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport nock from 'nock';\nimport App from '../App';\n\nconst REPOS = [{ name: 'repo1', description: '...' }];\n\nbeforeAll(() =>\n  nock('https://api.github.com')\n    .persist()\n    .get('/users/alice/repos')\n    .reply(200, REPOS)\n);\nafterEach(cleanup);\n\ntest('user sees public repos', async () => {\n  render(<App />);\n  userEvent.type(screen.getByPlaceholderText('Enter username'), 'alice');\n  userEvent.click(screen.getByRole('button', { name: /submit/i }));\n  await waitFor(() =>\n    REPOS.forEach((r) => expect(screen.getByText(r.name)).toBeInTheDocument())\n  );\n  expect(screen.queryByText('Loading...')).toBeNull();\n});\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Conclusion",
      "level": 2,
      "cards": [
        {
          "title": "Conclusion",
          "body": "This comprehensive cheat sheet covers basic to advanced RTL usage—rendering, querying, mocking, custom queries, and integration tests—to help you write robust, maintainable tests.",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    }
  ]
}