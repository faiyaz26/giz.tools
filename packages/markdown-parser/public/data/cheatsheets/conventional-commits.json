{
  "id": "conventional-commits",
  "metadata": {
    "title": "Conventional Commits",
    "date": "2024-03-11T09:51:44.000Z",
    "background": "bg-[#e86d7a]",
    "tags": [
      "permission"
    ],
    "categories": [
      "Other"
    ],
    "intro": "A cheat sheet of the Conventional Commits and Conventional Comments standards\n",
    "plugins": null
  },
  "sections": [
    {
      "title": "Getting Started {.cols-3}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Quick Guide",
          "level": 3,
          "cards": [
            {
              "title": "Quick Guide",
              "body": "",
              "footer": "#### Why Conventional Commits\n\n- Easy-to-follow structure for commit messages.\n- Clearly states the nature of changes.\n- Ensures uniformity in commit messages across teams.\n- Enables automated versioning and changelog generation.\n- Makes commit history easy to browse.\n- Allows the specification of 'scope' for more clarity.\n- Has a special notation for breaking changes.\n- Facilitates better understanding among team members.\n- Makes the review process efficient.\n- Helps in future troubleshooting with descriptive commit messages.\n\n#### Structure\n\n```javascript\n<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n```\n\n[Official Website](https://www.conventionalcommits.org/en) {.link-arrow}",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Examples",
          "level": 3,
          "cards": [
            {
              "title": "Examples",
              "body": "- feat: add jwt support\n- feat!: breaking change in API\n- feat!(ui): redesign user profile page\n- fix: fix SQL injection vulnerability\n- fix(database): resolve data race condition\n- docs: update setup section of README\n- style(login): correct indentation in login component\n- refactor: refactor user database schema\n- perf: optimize user retrieval code for faster response\n- test: add tests for jwt authentication\n- test(payment): add tests for the payment gateway\n- chore: update build script\n- chore(deps): update dependencies\n- build(docker): update Dockerfile to use node 14\n- ci: add job for integration tests\n- revert: revert commit a1b2c3d4e5f",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Types",
          "level": 3,
          "cards": [
            {
              "title": "Types",
              "body": "| Type     | Description                                                                                                      |\n| -------- | ---------------------------------------------------------------------------------------------------------------- |\n| `feat`   | Introduces a new feature                                                                                         |\n| `fix`    | Fixes a bug                                                                                                      |\n| `docs`   | Changes in documentation only                                                                                    |\n| `style`  | Code changes that do not impact the functionality (e.g., formatting, white-space, etc)                           |\n| refactor | Code changes that neither fix a bug nor introduce a feature, typically improving code readability or structure   |\n| perf     | Code changes that improve performance                                                                            |\n| test     | Addition of missing tests or corrections to existing tests                                                       |\n| `chore`  | Changes that do not modify the source code or test files, like tweaking the build process or adding dependencies |\n| build    | Changes affecting the build system or external dependencies (e.g., changes in webpack, npm packages)             |\n| ci       | Changes to Continuous Integration configuration files and scripts (e.g., Travis, CircleCI, Jenkins)              |\n| revert   | Reverts a previously made commit                                                                                 |\n\n{.bold-first}",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Specification {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Specification",
          "level": 3,
          "cards": [
            {
              "title": "Specification",
              "body": "- Commits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope,\n  OPTIONAL !, and REQUIRED terminal colon and space.\n- The type feat MUST be used when a commit adds a new feature to your application or library.\n- The type fix MUST be used when a commit represents a bug fix for your application.\n- A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded\n  by parenthesis, e.g., fix(parser):\n- A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short\n  summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.\n- A longer commit body MAY be provided after the short description, providing additional contextual information about\n  the code changes. The body MUST begin one blank line after the description.\n- A commit body is free-form and MAY consist of any number of newline separated paragraphs.\n- One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed\n  by either a :<space> or <space># separator, followed by a string value (this is inspired by the\n  [git trailer convention](https://git-scm.com/docs/git-interpret-trailers)).\n- A footer’s token MUST use - in place of whitespace characters, e.g., Acked-by (this helps differentiate the footer\n  section from a multi-paragraph body). An exception is made for BREAKING CHANGE, which MAY also be used as a token.\n- A footer’s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer\n  token/separator pair is observed.\n- Breaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer.\n- If included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon,\n  space, and description, e.g., BREAKING CHANGE: environment variables now take precedence over config files.\n- If included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is\n  used, BREAKING CHANGE: MAY be omitted from the footer section, and the commit description SHALL be used to describe\n  the breaking change.\n- Types other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs.\n- The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with\n  the exception of BREAKING CHANGE which MUST be uppercase.\n- BREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer.",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Also see",
      "level": 2,
      "cards": [
        {
          "title": "Also see",
          "body": "- [Conventional Commits](https://conventionalcommits.org/) _(conventionalcommits.org)_",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    }
  ]
}