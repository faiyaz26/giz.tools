{
  "id": "neo4j",
  "metadata": {
    "title": "Neo4j",
    "date": "2021-08-23T12:34:56.000Z",
    "background": "bg-[#3b85ef]",
    "tags": [
      "DB",
      "GraphDB"
    ],
    "categories": [
      "Database"
    ],
    "intro": "A Neo4j cheat sheet with getting started resources and information on how to query the database with Cypher.\n",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Getting Started with Neo4j",
          "level": 3,
          "cards": [
            {
              "title": "Getting Started with Neo4j",
              "body": "Neo4j is a Graph Database consisting of nodes connected together by relationships. You might consider using a Graph\ndatabase if you have a highly connected dataset or have queries with many joins.\n\n- [Download Neo4j Desktop](https://neo4j.com/download) _download Neo4j desktop or server editions_\n- [Neo4j Sandbox](https://sandbox.neo4j.com) _pick a data set - no installation required_\n- [Neo4j Aura](https://neo4j.com/aura) _free Neo4j instance in the cloud_\n- [Neo4j GraphAcademy](https://neo4j.com/graphacademy) _free, self-paced, hands-on online training_\n- [GraphGists](https://neo4j.com/graphgists) _use ase and industry specific example graphs_",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Graph Database Concepts",
          "level": 3,
          "cards": [
            {
              "title": "Graph Database Concepts",
              "body": "|                       |                                                                                                                                                                                                                                          |\n| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Nodes**             | Nodes are commonly used to represent _entities_ or _things_ in your data. For example, a **Person** or **Movie**                                                                                                                         |\n| **Relationships**     | Relationships are used to connect two nodes together and organise the data into structure. For example, a Person **acted in** a movie. A relationship has a _type_ and _direction_, although the direction can be ignored at query time. |\n| **Labels**            | Labels are used to group nodes into categories. For example, a person may have `Person` and `Actor` labels.                                                                                                                              |\n| **Relationship Type** | Each relationship has a type. Relationships allow you to explore smaller sections of a graph.                                                                                                                                            |\n| **Properties**        | Both nodes and relationships can have properties set against them. Properties are [name-value pairs](https://neo4j.com/docs/cypher-manual/4.3/syntax/values/#cypher-values).                                                             |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Syntax",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Read query structure",
          "level": 3,
          "cards": [
            {
              "title": "Read query structure",
              "body": "```\n[USE]\n[MATCH WHERE]\n[OPTIONAL MATCH WHERE]\n[WITH [ORDER BY] [SKIP] [LIMIT]]\nRETURN [ORDER BY] [SKIP] [LIMIT]\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Write-only query structure",
          "level": 3,
          "cards": [
            {
              "title": "Write-only query structure",
              "body": "```\n[USE]\n(CREATE | MERGE)*\n[SET|DELETE|REMOVE|FOREACH]*\n[RETURN [ORDER BY] [SKIP] [LIMIT]]\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Read-write query structure",
          "level": 3,
          "cards": [
            {
              "title": "Read-write query structure",
              "body": "```\n[USE]\n[MATCH WHERE]\n[OPTIONAL MATCH WHERE]\n[WITH [ORDER BY] [SKIP] [LIMIT]]\n(CREATE | MERGE)*\n[SET|DELETE|REMOVE|FOREACH]*\n[RETURN [ORDER BY] [SKIP] [LIMIT]]\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Reading Data",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "MATCH",
          "level": 3,
          "cards": [
            {
              "title": "MATCH",
              "body": "```\nMATCH (n:Person)-[:KNOWS]->(m:Person)\nWHERE n.name = 'Alice'\n```",
              "footer": "Node patterns can contain labels and properties.\n```\nMATCH (n)-->(m)\n```\nAny pattern can be used in MATCH.\n```\nMATCH (n {name: 'Alice'})-->(m)\n```\nPatterns with node properties.\n```\nMATCH p = (n)-->(m)\n```\nAssign a path to p.\n```\nOPTIONAL MATCH (n)-[r]->(m)\n```\nOptional pattern: nulls will be used for missing parts.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "WHERE",
          "level": 3,
          "cards": [
            {
              "title": "WHERE",
              "body": "```\nWHERE n.property <> $value\n```",
              "footer": "Use a predicate to filter. Note that WHERE is always part of a MATCH, OPTIONAL MATCH or WITH clause. Putting it after a\ndifferent clause in a query will alter what it does.\n```\nWHERE EXISTS {\nMATCH (n)-->(m) WHERE n.age = m.age\n}\n```\nUse an existential subquery to filter.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "RETURN",
          "level": 3,
          "cards": [
            {
              "title": "RETURN",
              "body": "```\nRETURN *\n```",
              "footer": "Return the value of all variables.\n```\nRETURN n AS columnName\n```\nUse alias for result column name.\n```\nRETURN DISTINCT n\n```\nReturn unique rows.\n```\nORDER BY n.property\n```\nSort the result.\n```\nORDER BY n.property DESC\n```\nSort the result in descending order.\n```\nSKIP $skipNumber\n```\nSkip a number of results.\n```\nLIMIT $limitNumber\n```\nLimit the number of results.\n```\nSKIP $skipNumber LIMIT $limitNumber\n```\nSkip results at the top and limit the number of results.\n```\nRETURN count(*)\n```\nThe number of matching rows. See Aggregating functions for more.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "WITH",
          "level": 3,
          "cards": [
            {
              "title": "WITH",
              "body": "```\nMATCH (user)-[:FRIEND]-(friend)\nWHERE user.name = $name\nWITH user, count(friend) AS friends\nWHERE friends > 10\nRETURN user\n```",
              "footer": "The WITH syntax is similar to RETURN. It separates query parts explicitly, allowing you to declare which variables to\ncarry over to the next part.\n```\nMATCH (user)-[:FRIEND]-(friend)\nWITH user, count(friend) AS friends\nORDER BY friends DESC\nSKIP 1\nLIMIT 3\nRETURN user\n```\nORDER BY, SKIP, and LIMIT can also be used with WITH.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "UNION",
          "level": 3,
          "cards": [
            {
              "title": "UNION",
              "body": "```\nMATCH (a)-[:KNOWS]->(b)\nRETURN b.name\nUNION\nMATCH (a)-[:LOVES]->(b)\nRETURN b.name\n```",
              "footer": "Returns the distinct union of all query results. Result column types and names have to match.\n```\nMATCH (a)-[:KNOWS]->(b)\nRETURN b.name\nUNION ALL\nMATCH (a)-[:LOVES]->(b)\nRETURN b.name\n```\nReturns the union of all query results, including duplicated rows.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Writing Data",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "CREATE",
          "level": 3,
          "cards": [
            {
              "title": "CREATE",
              "body": "```\nCREATE (n {name: $value})\n```",
              "footer": "Create a node with the given properties.\n```\nCREATE (n $map)\n```\nCreate a node with the given properties.\n```\nUNWIND $listOfMaps AS properties\nCREATE (n) SET n = properties\n```\nCreate nodes with the given properties.\n```\nCREATE (n)-[r:KNOWS]->(m)\n```\nCreate a relationship with the given type and direction; bind a variable to it.\n```\nCREATE (n)-[:LOVES {since: $value}]->(m)\n```\nCreate a relationship with the given type, direction, and properties.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "SET",
          "level": 3,
          "cards": [
            {
              "title": "SET",
              "body": "```\nSET n.property1 = $value1,\n    n.property2 = $value2\n```",
              "footer": "Update or create a property.\n```\nSET n = $map\n```\nSet all properties. This will remove any existing properties.\n```\nSET n += $map\n```\nAdd and update properties, while keeping existing ones.\n```\nSET n:Person\n```\nAdds a label Person to a node.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "MERGE",
          "level": 3,
          "cards": [
            {
              "title": "MERGE",
              "body": "```\nMERGE (n:Person {name: $value})\n  ON CREATE SET n.created = timestamp()\n  ON MATCH SET\n    n.counter = coalesce(n.counter, 0) + 1,\n    n.accessTime = timestamp()\n```",
              "footer": "Match a pattern or create it if it does not exist. Use ON CREATE and ON MATCH for conditional updates.\n```\nMATCH (a:Person {name: $value1}),\n(b:Person {name: $value2})\nMERGE (a)-[r:LOVES]->(b)\n```\nMERGE finds or creates a relationship between the nodes.\n```\nMATCH (a:Person {name: $value1})\nMERGE\n(a)-[r:KNOWS]->(b:Person {name: $value3})\n```\nMERGE finds or creates paths attached to the node.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "DELETE",
          "level": 3,
          "cards": [
            {
              "title": "DELETE",
              "body": "```\nDELETE n, r\n```",
              "footer": "Delete a node and a relationship.\n```\nDETACH DELETE n\n```\nDelete a node and all relationships connected to it.\n```\nMATCH (n)\nDETACH DELETE n\n```\nDelete all nodes and relationships from the database.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "REMOVE",
          "level": 3,
          "cards": [
            {
              "title": "REMOVE",
              "body": "```\nREMOVE n:Person\n```",
              "footer": "Remove a label from n.\n```\nREMOVE n.property\n```\nRemove a property.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "FOREACH",
          "level": 3,
          "cards": [
            {
              "title": "FOREACH",
              "body": "```\nFOREACH (r IN relationships(path) |\n  SET r.marked = true)\n```",
              "footer": "Execute a mutating operation for each relationship in a path.\n```\nFOREACH (value IN coll |\nCREATE (:Person {name: value}))\n```\nExecute a mutating operation for each element in a list.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "CALL subquery",
          "level": 3,
          "cards": [
            {
              "title": "CALL subquery",
              "body": "```\nCALL {\n  MATCH (p:Person)-[:FRIEND_OF]->(other:Person) RETURN p, other\n  UNION\n  MATCH (p:Child)-[:CHILD_OF]->(other:Parent) RETURN p, other\n}\n```",
              "footer": "This calls a subquery with two union parts. The result of the subquery can afterwards be post-processed.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "CALL procedure",
          "level": 3,
          "cards": [
            {
              "title": "CALL procedure",
              "body": "```\nCALL db.labels() YIELD label\n```",
              "footer": "This shows a standalone call to the built-in procedure db.labels to list all labels used in the database. Note that\nrequired procedure arguments are given explicitly in brackets after the procedure name.\n```\nCALL db.labels() YIELD *\n```\nStandalone calls may use YIELD \\* to return all columns.\n```\nCALL java.stored.procedureWithArgs\n```\nStandalone calls may omit YIELD and also provide arguments implicitly via statement parameters, e.g. a standalone call\nrequiring one argument input may be run by passing the parameter map {input: 'foo'}.\n```\nCALL db.labels() YIELD label\nRETURN count(label) AS count\n```\nCalls the built-in procedure db.labels inside a larger query to count all labels used in the database. Calls inside a\nlarger query always requires passing arguments and naming results explicitly with YIELD.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Import",
          "level": 3,
          "cards": [
            {
              "title": "Import",
              "body": "```\nLOAD CSV FROM\n'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists.csv' AS line\nCREATE (:Artist {name: line[1], year: toInteger(line[2])})\n```",
              "footer": "Load data from a CSV file and create nodes.\n```\nLOAD CSV WITH HEADERS FROM\n'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists-with-headers.csv' AS line\nCREATE (:Artist {name: line.Name, year: toInteger(line.Year)})\n```\nLoad CSV data which has headers.\n```\nUSING PERIODIC COMMIT 500\nLOAD CSV WITH HEADERS FROM\n'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists-with-headers.csv' AS line\nCREATE (:Artist {name: line.Name, year: toInteger(line.Year)})\n```\nCommit the current transaction after every 500 rows when importing large amounts of data.\n```\nLOAD CSV FROM\n'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists-fieldterminator.csv'\nAS line FIELDTERMINATOR ';'\nCREATE (:Artist {name: line[1], year: toInteger(line[2])})\n```\nUse a different field terminator, not the default which is a comma (with no whitespace around it).\n```\nLOAD CSV FROM\n'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists.csv' AS line\nRETURN DISTINCT file()\n```\nReturns the absolute path of the file that LOAD CSV is processing, returns null if called outside of LOAD CSV context.\n```\nLOAD CSV FROM\n'https://neo4j.com/docs/cypher-refcard/4.3/csv/artists.csv' AS line\nRETURN linenumber()\n```\nReturns the line number that LOAD CSV is currently processing, returns null if called outside of LOAD CSV context.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Operators",
          "level": 3,
          "cards": [
            {
              "title": "Operators",
              "body": "|                        |                                           |\n| ---------------------- | ----------------------------------------- |\n| **General**            | DISTINCT, ., []                           |\n| **Mathematical**       | +, -, \\*, /, %, ^                         |\n| **Comparison**         | =, <>, <, >, <=, >=, IS NULL, IS NOT NULL |\n| **Boolean**            | AND, OR, XOR, NOT                         |\n| **String**             | +                                         |\n| **List**               | +, IN, [x], [x .. y]                      |\n| **Regular Expression** | =~                                        |\n| **String matching**    | STARTS WITH, ENDS WITH, CONTAINS          |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "null",
          "level": 3,
          "cards": [
            {
              "title": "null",
              "body": "- `null` is used to represent missing/undefined values.\n\n- `null` is not equal to `null`. Not knowing two values does not imply that they are the same value. So the expression\n  `null = null` yields `null` and not `true`. To check if an expression is `null`, use `IS NULL`.\n- Arithmetic expressions, comparisons and function calls (except `coalesce`) will return `null` if any argument is\n  `null`.\n- An attempt to access a missing element in a list or a property that doesn’t exist yields `null`.\n- In `OPTIONAL MATCH` clauses, `nulls` will be used for missing parts of the pattern.",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Patterns",
          "level": 3,
          "cards": [
            {
              "title": "Patterns",
              "body": "```\n(n:Person)\n```",
              "footer": "Node with Person label.\n```\n(n:Person:Swedish)\n```\nNode with both Person and Swedish labels.\n```\n(n:Person {name: $value})\n```\nNode with the declared properties.\n```\n()-[r {name: $value}]-()\n```\nMatches relationships with the declared properties.\n```\n(n)-->(m)\n```\nRelationship from n to m.\n```\n(n)--(m)\n```\nRelationship in any direction between n and m.\n```\n(n:Person)-->(m)\n```\nNode n labeled Person with relationship to m.\n```\n(m)<-[:KNOWS]-(n)\n```\nRelationship of type KNOWS from n to m.\n```\n(n)-[:KNOWS|:LOVES]->(m)\n```\nRelationship of type KNOWS or of type LOVES from n to m.\n```\n(n)-[r]->(m)\n```\nBind the relationship to variable r.\n```\n(n)-[*1..5]->(m)\n```\nVariable length path of between 1 and 5 relationships from n to m.\n```\n(n)-[*]->(m)\n```\nVariable length path of any number of relationships from n to m. (See Performance section.)\n```\n(n)-[:KNOWS]->(m {property: $value})\n```\nA relationship of type KNOWS from a node n to a node m with the declared property.\n```\nshortestPath((n1:Person)-[*..6]-(n2:Person))\n```\nFind a single shortest path.\n```\nallShortestPaths((n1:Person)-[*..6]->(n2:Person))\n```\nFind all shortest paths.\n```\nsize((n)-->()-->())\n```\nCount the paths matching the pattern.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "USE",
          "level": 3,
          "cards": [
            {
              "title": "USE",
              "body": "```\nUSE myDatabase\n```",
              "footer": "Select myDatabase to execute query, or query part, against.\n```\nUSE neo4j\nMATCH (n:Person)-[:KNOWS]->(m:Person)\nWHERE n.name = 'Alice'\n```\nMATCH query executed against neo4j database.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "SHOW FUNCTIONS and PROCEDURES",
          "level": 3,
          "cards": [
            {
              "title": "SHOW FUNCTIONS and PROCEDURES",
              "body": "```\nSHOW FUNCTIONS\n```",
              "footer": "Listing all available functions.\n```\nSHOW PROCEDURES EXECUTABLE YIELD name\n```\nList all procedures that can be executed by the current user and return only the name of the procedures.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Labels",
          "level": 3,
          "cards": [
            {
              "title": "Labels",
              "body": "```\nCREATE (n:Person {name: $value})\n```",
              "footer": "Create a node with label and property.\n```\nMERGE (n:Person {name: $value})\n```\nMatches or creates unique node(s) with the label and property.\n```\nSET n:Spouse:Parent:Employee\n```\nAdd label(s) to a node.\n```\nMATCH (n:Person)\n```\nMatches nodes labeled Person.\n```\nMATCH (n:Person)\nWHERE n.name = $value\n```\nMatches nodes labeled Person with the given name.\n```\nWHERE (n:Person)\n```\nChecks the existence of the label on the node.\n```\nlabels(n)\n```\nLabels of the node.\n```\nREMOVE n:Person\n```\nRemove the label from the node.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Lists",
          "level": 3,
          "cards": [
            {
              "title": "Lists",
              "body": "```\n['a', 'b', 'c'] AS list\n```",
              "footer": "Literal lists are declared in square brackets.\n```\nsize($list) AS len, $list[0] AS value\n```\nLists can be passed in as parameters.\n```\nrange($firstNum, $lastNum, $step) AS list\n```\nrange() creates a list of numbers (step is optional), other functions returning lists are: labels(), nodes(),\nrelationships().\n```\nMATCH p = (a)-[:KNOWS*]->()\nRETURN relationships(p) AS r\n```\nThe list of relationships comprising a variable length path can be returned using named paths and relationships().\n```\nRETURN matchedNode.list[0] AS value,\nsize(matchedNode.list) AS len\n```\nProperties can be lists of strings, numbers or booleans.\n```\nlist[$idx] AS value,\nlist[$startIdx..$endIdx] AS slice\n```\nList elements can be accessed with idx subscripts in square brackets. Invalid indexes return null. Slices can be\nretrieved with intervals from start_idx to end_idx, each of which can be omitted or negative. Out of range elements are\nignored.\n```\nUNWIND $names AS name\nMATCH (n {name: name})\nRETURN avg(n.age)\n```\nWith UNWIND, any list can be transformed back into individual rows. The example matches all names from a list of names.\n```\nMATCH (a)\nRETURN [(a)-->(b) WHERE b.name = 'Bob' | b.age]\n```\nPattern comprehensions may be used to do a custom projection from a match directly into a list.\n```\nMATCH (person)\nRETURN person { .name, .age}\n```\nMap projections may be easily constructed from nodes, relationships and other map values.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Maps",
          "level": 3,
          "cards": [
            {
              "title": "Maps",
              "body": "```\n{name: 'Alice', age: 38,\n address: {city: 'London', residential: true}}\n```",
              "footer": "Literal maps are declared in curly braces much like property maps. Lists are supported.\n```\nWITH {person: {name: 'Anne', age: 25}} AS p\nRETURN p.person.name\n```\nAccess the property of a nested map.\n```\nMERGE (p:Person {name: $map.name})\nON CREATE SET p = $map\n```\nMaps can be passed in as parameters and used either as a map or by accessing keys.\n```\nMATCH (matchedNode:Person)\nRETURN matchedNode\n```\nNodes and relationships are returned as maps of their data.\n```\nmap.name, map.age, map.children[0]\n```\nMap entries can be accessed by their keys. Invalid keys result in an error.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Predicates",
          "level": 3,
          "cards": [
            {
              "title": "Predicates",
              "body": "```\nn.property <> $value\n```",
              "footer": "Use comparison operators.\n```\ntoString(n.property) = $value\n```\nUse functions.\n```\nn.number >= 1 AND n.number <= 10\n```\nUse boolean operators to combine predicates.\n```\n1 <= n.number <= 10\n```\nUse chained operators to combine predicates.\n```\nn:Person\n```\nCheck for node labels.\n```\nvariable IS NOT NULL\n```\nCheck if something is not null, e.g. that a property exists.\n```\nn.property IS NULL OR n.property = $value\n```\nEither the property does not exist or the predicate is true.\n```\nn.property = $value\n```\nNon-existing property returns null, which is not equal to anything.\n```\nn[\"property\"] = $value\n```\nProperties may also be accessed using a dynamically computed property name.\n```\nn.property STARTS WITH 'Tim' OR\nn.property ENDS WITH 'n' OR\nn.property CONTAINS 'goodie'\n```\nString matching.\n```\nn.property =~ 'Tim.*'\n```\nString regular expression matching.\n```\n(n)-[:KNOWS]->(m)\n```\nEnsure the pattern has at least one match.\n```\nNOT (n)-[:KNOWS]->(m)\n```\nExclude matches to (n)-[:KNOWS]->(m) from the result.\n```\nn.property IN [$value1, $value2]\n```\nCheck if an element exists in a list.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "List predicates",
          "level": 3,
          "cards": [
            {
              "title": "List predicates",
              "body": "```\nall(x IN coll WHERE x.property IS NOT NULL)\n```",
              "footer": "Returns true if the predicate is true for all elements in the list.\n```\nany(x IN coll WHERE x.property IS NOT NULL)\n```\nReturns true if the predicate is true for at least one element in the list.\n```\nnone(x IN coll WHERE x.property IS NOT NULL)\n```\nReturns true if the predicate is false for all elements in the list.\n```\nsingle(x IN coll WHERE x.property IS NOT NULL)\n```\nReturns true if the predicate is true for exactly one element in the list.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "CASE",
          "level": 3,
          "cards": [
            {
              "title": "CASE",
              "body": "```\nCASE n.eyes\n WHEN 'blue' THEN 1\n WHEN 'brown' THEN 2\n ELSE 3\nEND\n```",
              "footer": "Return THEN value from the matching WHEN value. The ELSE value is optional, and substituted for null if missing.\n```\nCASE\nWHEN n.eyes = 'blue' THEN 1\nWHEN n.age < 40 THEN 2\nELSE 3\nEND\n```\nReturn THEN value from the first WHEN predicate evaluating to true. Predicates are evaluated in order.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "List expressions",
          "level": 3,
          "cards": [
            {
              "title": "List expressions",
              "body": "```\nsize($list)\n```",
              "footer": "Number of elements in the list.\n```\nreverse($list)\n```\nReverse the order of the elements in the list.\n```\nhead($list), last($list), tail($list)\n```\nhead() returns the first, last() the last element of the list. tail() returns all but the first element. All return null\nfor an empty list.\n```\n[x IN list | x.prop]\n```\nA list of the value of the expression for each element in the original list.\n```\n[x IN list WHERE x.prop <> $value]\n```\nA filtered list of the elements where the predicate is true.\n```\n[x IN list WHERE x.prop <> $value | x.prop]\n```\nA list comprehension that filters a list and extracts the value of the expression for each element in that list.\n```\nreduce(s = \"\", x IN list | s + x.prop)\n```\nEvaluate expression for each element in the list, accumulate the results.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Functions",
          "level": 3,
          "cards": [
            {
              "title": "Functions",
              "body": "```\ncoalesce(n.property, $defaultValue)\n```",
              "footer": "The first non-null expression.\n```\ntimestamp()\n```\nMilliseconds since midnight, January 1, 1970 UTC.\n```\nid(nodeOrRelationship)\n```\nThe internal id of the relationship or node.\n```\ntoInteger($expr)\n```\nConverts the given input into an integer if possible; otherwise it returns null.\n```\ntoFloat($expr)\n```\nConverts the given input into a floating point number if possible; otherwise it returns null.\n```\ntoBoolean($expr)\n```\nConverts the given input into a boolean if possible; otherwise it returns null.\n```\nkeys($expr)\n```\nReturns a list of string representations for the property names of a node, relationship, or map.\n```\nproperties($expr)\n```\nReturns a map containing all the properties of a node or relationship.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Path functions",
          "level": 3,
          "cards": [
            {
              "title": "Path functions",
              "body": "```\nlength(path)\n```",
              "footer": "The number of relationships in the path.\n```\nnodes(path)\n```\nThe nodes in the path as a list.\n```\nrelationships(path)\n```\nThe relationships in the path as a list.\n```\n[x IN nodes(path) | x.prop]\n```\nExtract properties from the nodes in a path.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Spatial functions",
          "level": 3,
          "cards": [
            {
              "title": "Spatial functions",
              "body": "```\npoint({x: $x, y: $y})\n```",
              "footer": "Returns a point in a 2D cartesian coordinate system.\n```\npoint({latitude: $y, longitude: $x})\n```\nReturns a point in a 2D geographic coordinate system, with coordinates specified in decimal degrees.\n```\npoint({x: $x, y: $y, z: $z})\n```\nReturns a point in a 3D cartesian coordinate system.\n```\npoint({latitude: $y, longitude: $x, height: $z})\n```\nReturns a point in a 3D geographic coordinate system, with latitude and longitude in decimal degrees, and height in\nmeters.\n```\ndistance(point({x: $x1, y: $y1}), point({x: $x2, y: $y2}))\n```\nReturns a floating point number representing the linear distance between two points. The returned units will be the same\nas those of the point coordinates, and it will work for both 2D and 3D cartesian points.\n```\ndistance(point({latitude: $y1, longitude: $x1}), point({latitude: $y2, longitude: $x2}))\n```\nReturns the geodesic distance between two points in meters. It can be used for 3D geographic points as well.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Functions",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Temporal functions",
          "level": 3,
          "cards": [
            {
              "title": "Temporal functions",
              "body": "```\ndate(\"2018-04-05\")\n```",
              "footer": "Returns a date parsed from a string.\n```\nlocaltime(\"12:45:30.25\")\n```\nReturns a time with no time zone.\n```\ntime(\"12:45:30.25+01:00\")\n```\nReturns a time in a specified time zone.\n```\nlocaldatetime(\"2018-04-05T12:34:00\")\n```\nReturns a datetime with no time zone.\n```\ndatetime(\"2018-04-05T12:34:00[Europe/Berlin]\")\n```\nReturns a datetime in the specified time zone.\n```\ndatetime({epochMillis: 3360000})\n```\nTransforms 3360000 as a UNIX Epoch time into a normal datetime.\n```\ndate({year: $year, month: $month, day: $day})\n```\nAll of the temporal functions can also be called with a map of named components. This example returns a date from year,\nmonth and day components. Each function supports a different set of possible components.\n```\ndatetime({date: $date, time: $time})\n```\nTemporal types can be created by combining other types. This example creates a datetime from a date and a time.\n```\ndate({date: $datetime, day: 5})\n```\nTemporal types can be created by selecting from more complex types, as well as overriding individual components. This\nexample creates a date by selecting from a datetime, as well as overriding the day component.\n```\nWITH date(\"2018-04-05\") AS d\nRETURN d.year, d.month, d.day, d.week, d.dayOfWeek\n```\nAccessors allow extracting components of temporal types.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Duration functions",
          "level": 3,
          "cards": [
            {
              "title": "Duration functions",
              "body": "```\nduration(\"P1Y2M10DT12H45M30.25S\")\n```",
              "footer": "Returns a duration of 1 year, 2 months, 10 days, 12 hours, 45 minutes and 30.25 seconds.\n```\nduration.between($date1,$date2)\n```\nReturns a duration between two temporal instances.\n```\nWITH duration(\"P1Y2M10DT12H45M\") AS d\nRETURN d.years, d.months, d.days, d.hours, d.minutes\n```\nReturns 1 year, 14 months, 10 days, 12 hours and 765 minutes.\n```\nWITH duration(\"P1Y2M10DT12H45M\") AS d\nRETURN d.years, d.monthsOfYear, d.days, d.hours, d.minutesOfHour\n```\nReturns 1 year, 2 months, 10 days, 12 hours and 45 minutes.\n```\ndate(\"2015-01-01\") + duration(\"P1Y1M1D\")\n```\nReturns a date of 2016-02-02. It is also possible to subtract durations from temporal instances.\n```\nduration(\"PT30S\") * 10\n```\nReturns a duration of 5 minutes. It is also possible to divide a duration by a number.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Mathematical functions",
          "level": 3,
          "cards": [
            {
              "title": "Mathematical functions",
              "body": "```\nabs($expr)\n```",
              "footer": "The absolute value.\n```\nrand()\n```\nReturns a random number in the range from 0 (inclusive) to 1 (exclusive), [0,1). Returns a new value for each call. Also\nuseful for selecting a subset or random ordering.\n```\nround($expr)\n```\nRound to the nearest integer; ceil() and floor() find the next integer up or down.\n```\nsqrt($expr)\n```\nThe square root.\n```\nsign($expr)\n```\n0 if zero, -1 if negative, 1 if positive.\n```\nsin($expr)\n```\nTrigonometric functions also include cos(), tan(), cot(), asin(), acos(), atan(), atan2(), and haversin(). All arguments\nfor the trigonometric functions should be in radians, if not otherwise specified.\n```\ndegrees($expr), radians($expr), pi()\n```\nConverts radians into degrees; use radians() for the reverse, and pi() for π.\n```\nlog10($expr), log($expr), exp($expr), e()\n```\nLogarithm base 10, natural logarithm, e to the power of the parameter, and the value of e.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "String functions",
          "level": 3,
          "cards": [
            {
              "title": "String functions",
              "body": "```\ntoString($expression)\n```",
              "footer": "String representation of the expression.\n```\nreplace($original, $search, $replacement)\n```\nReplace all occurrences of search with replacement. All arguments must be expressions.\n```\nsubstring($original, $begin, $subLength)\n```\nGet part of a string. The subLength argument is optional.\n```\nleft($original, $subLength),\nright($original, $subLength)\n```\nThe first part of a string. The last part of the string.\n```\ntrim($original), lTrim($original),\nrTrim($original)\n```\nTrim all whitespace, or on the left or right side.\n```\ntoUpper($original), toLower($original)\n```\nUPPERCASE and lowercase.\n```\nsplit($original, $delimiter)\n```\nSplit a string into a list of strings.\n```\nreverse($original)\n```\nReverse a string.\n```\nsize($string)\n```\nCalculate the number of characters in the string.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Relationship functions",
          "level": 3,
          "cards": [
            {
              "title": "Relationship functions",
              "body": "```\ntype(a_relationship)\n```",
              "footer": "String representation of the relationship type.\n```\nstartNode(a_relationship)\n```\nStart node of the relationship.\n```\nendNode(a_relationship)\n```\nEnd node of the relationship.\n```\nid(a_relationship)\n```\nThe internal id of the relationship.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Aggregating functions",
          "level": 3,
          "cards": [
            {
              "title": "Aggregating functions",
              "body": "```\ncount(*)\n```",
              "footer": "The number of matching rows.\n```\ncount(variable)\n```\nThe number of non-null values.\n```\ncount(DISTINCT variable)\n```\nAll aggregating functions also take the DISTINCT operator, which removes duplicates from the values.\n```\ncollect(n.property)\n```\nList from the values, ignores null.\n```\nsum(n.property)\n```\nSum numerical values. Similar functions are avg(), min(), max().\n```\npercentileDisc(n.property, $percentile)\n```\nDiscrete percentile. Continuous percentile is percentileCont(). The percentile argument is from 0.0 to 1.0.\n```\nstDev(n.property)\n```\nStandard deviation for a sample of a population. For an entire population use stDevP().",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Schema Operations",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "INDEX",
          "level": 3,
          "cards": [
            {
              "title": "INDEX",
              "body": "```\nCREATE INDEX FOR (p:Person) ON (p.name)\n```",
              "footer": "Create an index on nodes with label Person and property name.\n```\nCREATE INDEX index_name FOR ()-[k:KNOWS]-() ON (k.since)\n```\nCreate an index on relationships with type KNOWS and property since with the name index_name.\n```\nCREATE INDEX FOR (p:Person) ON (p.surname)\nOPTIONS {indexProvider: 'native-btree-1.0', indexConfig: {`spatial.cartesian.min`: [-100.0, -100.0], `spatial.cartesian.max`: [100.0, 100.0]}}\n```\nCreate an index on nodes with label Person and property surname with the index provider native-btree-1.0 and given\nspatial.cartesian settings. The other index settings will have their default values.\n```\nCREATE INDEX FOR (p:Person) ON (p.name, p.age)\n```\nCreate a composite index on nodes with label Person and the properties name and age, throws an error if the index\nalready exist.\n```\nCREATE INDEX IF NOT EXISTS FOR (p:Person) ON (p.name, p.age)\n```\nCreate a composite index on nodes with label Person and the properties name and age if it does not already exist, does\nnothing if it did exist.\n```\nCREATE LOOKUP INDEX lookup_index_name FOR (n) ON EACH labels(n)\n```\nCreate a token lookup index with the name lookup_index_name on nodes with any label .\n```\nCREATE LOOKUP INDEX FOR ()-[r]-() ON EACH type(r)\n```\nCreate a token lookup index on relationships with any relationship type.\n```\nCREATE FULLTEXT INDEX node_fulltext_index_name FOR (n:Friend) ON EACH [n.name]\nOPTIONS {indexConfig: {`fulltext.analyzer`: 'swedish'}}\n```\nCreate a fulltext index on nodes with the name node_fulltext_index_name and analyzer swedish. Fulltext indexes on nodes\ncan only be used by from the procedure db.index.fulltext.queryNodes. The other index settings will have their default\nvalues.\n```\nCREATE FULLTEXT INDEX rel_fulltext_index_name FOR ()-[r:HAS_PET|BROUGHT_PET]-() ON EACH [r.since, r.price]\n```\nCreate a fulltext index on relationships with the name rel_fulltext_index_name. Fulltext indexes on relationships can\nonly be used by from the procedure db.index.fulltext.queryRelationships.\n```\nSHOW INDEXES\n```\nList all indexes.\n```\nMATCH (n:Person) WHERE n.name = $value\n```\nAn index can be automatically used for the equality comparison. Note that for example toLower(n.name) = $value will not\nuse an index.\n```\nMATCH (n:Person)\nWHERE n.name IN [$value]\n```\nAn index can automatically be used for the IN list checks.\n```\nMATCH (n:Person)\nWHERE n.name = $value and n.age = $value2\n```\nA composite index can be automatically used for equality comparison of both properties. Note that there needs to be\npredicates on all properties of the composite index for it to be used.\n```\nMATCH (n:Person)\nUSING INDEX n:Person(name)\nWHERE n.name = $value\n```\nIndex usage can be enforced when Cypher uses a suboptimal index, or more than one index should be used.\n```\nDROP INDEX index_name\n```\nDrop the index named index_name, throws an error if the index does not exist.\n```\nDROP INDEX index_name IF EXISTS\n```\nDrop the index named index_name if it exists, does nothing if it does not exist.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "CONSTRAINT",
          "level": 3,
          "cards": [
            {
              "title": "CONSTRAINT",
              "body": "```\nCREATE CONSTRAINT ON (p:Person)\n       ASSERT p.name IS UNIQUE\n```",
              "footer": "Create a unique property constraint on the label Person and property name. If any other node with that label is updated\nor created with a name that already exists, the write operation will fail. This constraint will create an accompanying\nindex.\n```\nCREATE CONSTRAINT uniqueness ON (p:Person)\nASSERT p.age IS UNIQUE\n```\nCreate a unique property constraint on the label Person and property age with the name uniqueness. If any other node\nwith that label is updated or created with a age that already exists, the write operation will fail. This constraint\nwill create an accompanying index.\n```\nCREATE CONSTRAINT ON (p:Person)\nASSERT p.surname IS UNIQUE\nOPTIONS {indexProvider: 'native-btree-1.0'}\n```\nCreate a unique property constraint on the label Person and property surname with the index provider native-btree-1.0\nfor the accompanying index.\n```\nCREATE CONSTRAINT ON (p:Person)\nASSERT p.name IS NOT NULL\n```\n(★) Create a node property existence constraint on the label Person and property name, throws an error if the constraint\nalready exists. If a node with that label is created without a name, or if the name property is removed from an existing\nnode with the Person label, the write operation will fail.\n```\nCREATE CONSTRAINT node_exists IF NOT EXISTS ON (p:Person)\nASSERT p.name IS NOT NULL\n```\n(★) If a node property existence constraint on the label Person and property name or any constraint with the name\nnode_exists already exist then nothing happens. If no such constraint exists, then it will be created.\n```\nCREATE CONSTRAINT ON ()-[l:LIKED]-()\nASSERT l.when IS NOT NULL\n```\n(★) Create a relationship property existence constraint on the type LIKED and property when. If a relationship with that\ntype is created without a when, or if the when property is removed from an existing relationship with the LIKED type,\nthe write operation will fail.\n```\nCREATE CONSTRAINT relationship_exists ON ()-[l:LIKED]-()\nASSERT l.since IS NOT NULL\n```\n(★) Create a relationship property existence constraint on the type LIKED and property since with the name\nrelationship_exists. If a relationship with that type is created without a since, or if the since property is removed\nfrom an existing relationship with the LIKED type, the write operation will fail.\n```\nSHOW UNIQUE CONSTRAINTS YIELD *\n```\nList all unique constraints.\n```\nCREATE CONSTRAINT ON (p:Person)\nASSERT (p.firstname, p.surname) IS NODE KEY\n```\n(★) Create a node key constraint on the label Person and properties firstname and surname. If a node with that label is\ncreated without both firstname and surname or if the combination of the two is not unique, or if the firstname and/or\nsurname labels on an existing node with the Person label is modified to violate these constraints, the write operation\nwill fail.\n```\nCREATE CONSTRAINT node_key ON (p:Person)\nASSERT (p.name, p.surname) IS NODE KEY\n```\n(★) Create a node key constraint on the label Person and properties name and surname with the name node_key. If a node\nwith that label is created without both name and surname or if the combination of the two is not unique, or if the name\nand/or surname labels on an existing node with the Person label is modified to violate these constraints, the write\noperation will fail.\n```\nCREATE CONSTRAINT node_key_with_config ON (p:Person)\nASSERT (p.name, p.age) IS NODE KEY\nOPTIONS {indexConfig: {`spatial.wgs-84.min`: [-100.0, -100.0], `spatial.wgs-84.max`: [100.0, 100.0]}}\n```\n(★) Create a node key constraint on the label Person and properties name and age with the name node_key_with_config and\ngiven spatial.wgs-84 settings for the accompanying index. The other index settings will have their default values.\n```\nDROP CONSTRAINT uniqueness\n```\nDrop the constraint with the name uniqueness, throws an error if the constraint does not exist.\n```\nDROP CONSTRAINT uniqueness IF EXISTS\n```\nDrop the constraint with the name uniqueness if it exists, does nothing if it does not exist.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Performance",
          "level": 3,
          "cards": [
            {
              "title": "Performance",
              "body": "- Use parameters instead of literals when possible. This allows Cypher to re-use your queries instead of having to parse\n  and build new execution plans.\n- Always set an upper limit for your variable length patterns. It’s possible to have a query go wild and touch all nodes\n  in a graph by mistake.\n- Return only the data you need. Avoid returning whole nodes and relationships — instead, pick the data you need and\n  return only that.\n- Use `PROFILE` / `EXPLAIN` to analyze the performance of your queries. See\n  [Query Tuning](https://neo4j.com/docs/cypher-manual/4.3/query-tuning) for more information on these and other topics,\n  such as planner hints.",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Multidatabase",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Database management",
          "level": 3,
          "cards": [
            {
              "title": "Database management",
              "body": "```\nCREATE OR REPLACE DATABASE myDatabase\n```",
              "footer": "(★) Create a database named myDatabase. If a database with that name exists, then the existing database is deleted and a\nnew one created.\n```\nSTOP DATABASE myDatabase\n```\n(★) Stop the database myDatabase.\n```\nSTART DATABASE myDatabase\n```\n(★) Start the database myDatabase.\n```\nSHOW DATABASES\n```\nList all databases in the system and information about them.\n```\nSHOW DATABASES\nYIELD name, currentStatus\nWHERE name CONTAINS 'my' AND currentStatus = 'online'\n```\nList information about databases, filtered by name and online status and further refined by conditions on these.\n```\nSHOW DATABASE myDatabase\n```\nList information about the database myDatabase.\n```\nSHOW DEFAULT DATABASE\n```\nList information about the default database.\n```\nSHOW HOME DATABASE\n```\nList information about the current users home database.\n```\nDROP DATABASE myDatabase IF EXISTS\n```\n(★) Delete the database myDatabase, if it exists.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Neo4j Security",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "User management",
          "level": 3,
          "cards": [
            {
              "title": "User management",
              "body": "```\nCREATE USER alice SET PASSWORD $password\n```",
              "footer": "Create a new user and a password. This password must be changed on the first login.\n```\nALTER USER alice SET PASSWORD $password CHANGE NOT REQUIRED\n```\nSet a new password for a user. This user will not be required to change this password on the next login.\n```\nALTER USER alice IF EXISTS SET PASSWORD CHANGE REQUIRED\n```\nIf the specified user exists, force this user to change their password on the next login.\n```\nALTER USER alice SET STATUS SUSPENDED\n```\n(★) Change the user status to suspended. Use SET STATUS ACTIVE to reactivate the user.\n```\nALTER USER alice SET HOME DATABASE otherDb\n```\n(★) Change the home database of user to otherDb. Use REMOVE HOME DATABASE to unset the home database for the user and\nfallback to the default database.\n```\nALTER CURRENT USER SET PASSWORD FROM $old TO $new\n```\nChange the password of the logged-in user. The user will not be required to change this password on the next login.\n```\nSHOW CURRENT USER\n```\nList the currently logged-in user, their status, roles and whether they need to change their password. (★) Status and\nroles are Enterprise Edition only.\n```\nSHOW USERS\n```\nList all users in the system, their status, roles and if they need to change their password. (★) Status and roles are\nEnterprise Edition only.\n```\nSHOW USERS\nYIELD user, suspended\nWHERE suspended = true\n```\nList users in the system, filtered by their name and status and further refined by whether they are suspended. (★)\nStatus is Enterprise Edition only.\n```\nRENAME USER alice TO alice_delete\n```\nRename the user alice to alice_delete.\n```\nDROP USER alice_delete\n```\nDelete the user.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Role management",
          "level": 3,
          "cards": [
            {
              "title": "(★) Role management",
              "body": "```\nCREATE ROLE my_role\n```",
              "footer": "Create a role.\n```\nCREATE ROLE my_second_role IF NOT EXISTS AS COPY OF my_role\n```\nCreate a role named my_second_role, unless it already exists, as a copy of the existing my_role.\n```\nRENAME ROLE my_second_role TO my_other_role\n```\nRename a role named my_second_role to my_other_role.\n```\nGRANT ROLE my_role, my_other_role TO alice\n```\nAssign roles to a user.\n```\nREVOKE ROLE my_other_role FROM alice\n```\nRemove a specified role from a user.\n```\nSHOW ROLES\n```\nList all roles in the system.\n```\nSHOW ROLES\nYIELD role\nWHERE role CONTAINS 'my'\n```\nList roles, filtered by the name of the role and further refined by whether the name contains 'my'.\n```\nSHOW POPULATED ROLES WITH USERS\n```\nList all roles that are assigned to at least one user in the system, and the users assigned to those roles.\n```\nDROP ROLE my_role\n```\nDelete a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Graph read privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) Graph read privileges",
              "body": "```\nGRANT TRAVERSE ON GRAPH * NODES * TO my_role\n```",
              "footer": "Grant traverse privilege on all nodes and all graphs to a role.\n```\nDENY READ {prop} ON GRAPH foo RELATIONSHIP Type TO my_role\n```\nDeny read privilege on a specified property, on all relationships with a specified type in a specified graph, to a role.\n```\nGRANT MATCH {*} ON HOME GRAPH ELEMENTS Label TO my_role\n```\nGrant read privilege on all properties and traverse privilege in the home graph, to a role. Here, both privileges apply\nto all nodes and relationships with a specified label/type in the graph.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Graph write privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) Graph write privileges",
              "body": "```\nGRANT CREATE ON GRAPH * NODES Label TO my_role\n```",
              "footer": "Grant create privilege on all nodes with a specified label in all graphs to a role.\n```\nDENY DELETE ON GRAPH neo4j TO my_role\n```\nDeny delete privilege on all nodes and relationships in a specified graph to a role.\n```\nREVOKE SET LABEL Label ON GRAPH * FROM my_role\n```\nRevoke set label privilege for the specified label on all graphs to a role.\n```\nGRANT REMOVE LABEL * ON GRAPH foo TO my_role\n```\nGrant remove label privilege for all labels on a specified graph to a role.\n```\nDENY SET PROPERTY {prop} ON GRAPH foo RELATIONSHIPS Type TO my_role\n```\nDeny set property privilege on a specified property, on all relationships with a specified type in a specified graph, to\na role.\n```\nGRANT MERGE {*} ON GRAPH * NODES Label TO my_role\n```\nGrant merge privilege on all properties, on all nodes with a specified label in all graphs, to a role.\n```\nREVOKE WRITE ON GRAPH * FROM my_role\n```\nRevoke write privilege on all graphs from a role.\n```\nDENY ALL GRAPH PRIVILEGES ON GRAPH foo TO my_role\n```\nDeny all graph privileges privilege on a specified graph to a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) SHOW PRIVILEGES",
          "level": 3,
          "cards": [
            {
              "title": "(★) SHOW PRIVILEGES",
              "body": "```\nSHOW PRIVILEGES AS COMMANDS\n```",
              "footer": "List all privileges in the system as Cypher commands.\n```\nSHOW PRIVILEGES\n```\nList all privileges in the system, and the roles that they are assigned to.\n```\nSHOW PRIVILEGES\nYIELD role, action, access\nWHERE role = 'my_role'\n```\nList information about privileges, filtered by role, action and access and further refined by the name of the role.\n```\nSHOW ROLE my_role PRIVILEGES AS COMMANDS\n```\nList all privileges assigned to a role as Cypher commands.\n```\nSHOW ROLE my_role, my_second_role PRIVILEGES AS COMMANDS\n```\nList all privileges assigned to each of the multiple roles as Cypher commands.\n```\nSHOW USER alice PRIVILEGES AS COMMANDS\n```\nList all privileges of a user, and the role that they are assigned to as Cypher commands.\n```\nSHOW USER PRIVILEGES AS COMMANDS\n```\nList all privileges of the currently logged in user, and the role that they are assigned to as Cypher commands.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Database privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) Database privileges",
              "body": "```\nGRANT ACCESS ON DATABASE * TO my_role\n```",
              "footer": "Grant privilege to access and run queries against all databases to a role.\n```\nGRANT START ON DATABASE * TO my_role\n```\nGrant privilege to start all databases to a role.\n```\nGRANT STOP ON DATABASE * TO my_role\n```\nGrant privilege to stop all databases to a role.\n```\nGRANT CREATE INDEX ON DATABASE foo TO my_role\n```\nGrant privilege to create indexes on a specified database to a role.\n```\nGRANT DROP INDEX ON DATABASE foo TO my_role\n```\nGrant privilege to drop indexes on a specified database to a role.\n```\nGRANT SHOW INDEX ON DATABASE * TO my_role\n```\nGrant privilege to show indexes on all databases to a role.\n```\nDENY INDEX MANAGEMENT ON DATABASE bar TO my_role\n```\nDeny privilege to create and drop indexes on a specified database to a role.\n```\nGRANT CREATE CONSTRAINT ON DATABASE * TO my_role\n```\nGrant privilege to create constraints on all databases to a role.\n```\nDENY DROP CONSTRAINT ON DATABASE * TO my_role\n```\nDeny privilege to drop constraints on all databases to a role.\n```\nDENY SHOW CONSTRAINT ON DATABASE foo TO my_role\n```\nDeny privilege to show constraints on a specified database to a role.\n```\nREVOKE CONSTRAINT ON DATABASE * FROM my_role\n```\nRevoke granted and denied privileges to create and drop constraints on all databases from a role.\n```\nGRANT CREATE NEW LABELS ON DATABASE * TO my_role\n```\nGrant privilege to create new labels on all databases to a role.\n```\nDENY CREATE NEW TYPES ON DATABASE foo TO my_role\n```\nDeny privilege to create new relationship types on a specified database to a role.\n```\nREVOKE GRANT CREATE NEW PROPERTY NAMES ON DATABASE bar FROM my_role\n```\nRevoke the grant privilege to create new property names on a specified database from a role.\n```\nGRANT NAME MANAGEMENT ON HOME DATABASE TO my_role\n```\nGrant privilege to create labels, relationship types, and property names on the home database to a role.\n```\nGRANT ALL ON DATABASE baz TO my_role\n```\nGrant privilege to access, create and drop indexes and constraints, create new labels, types and property names on a\nspecified database to a role.\n```\nGRANT SHOW TRANSACTION (*) ON DATABASE foo TO my_role\n```\nGrant privilege to list transactions and queries from all users on a specified database to a role.\n```\nDENY TERMINATE TRANSACTION (user1, user2) ON DATABASES * TO my_role\n```\nDeny privilege to kill transactions and queries from user1 and user2 on all databases to a role.\n```\nREVOKE GRANT TRANSACTION MANAGEMENT ON HOME DATABASE FROM my_role\n```\nRevoke the granted privilege to list and kill transactions and queries from all users on the home database from a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Role management privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) Role management privileges",
              "body": "```\nGRANT CREATE ROLE ON DBMS TO my_role\n```",
              "footer": "Grant the privilege to create roles to a role.\n```\nGRANT RENAME ROLE ON DBMS TO my_role\n```\nGrant the privilege to rename roles to a role.\n```\nGRANT DROP ROLE ON DBMS TO my_role\n```\nGrant the privilege to delete roles to a role.\n```\nDENY ASSIGN ROLE ON DBMS TO my_role\n```\nDeny the privilege to assign roles to users to a role.\n```\nDENY REMOVE ROLE ON DBMS TO my_role\n```\nDeny the privilege to remove roles from users to a role.\n```\nREVOKE DENY SHOW ROLE ON DBMS FROM my_role\n```\nRevoke the denied privilege to show roles from a role.\n```\nGRANT ROLE MANAGEMENT ON DBMS TO my_role\n```\nGrant all privileges to manage roles to a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) User management privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) User management privileges",
              "body": "```\nGRANT CREATE USER ON DBMS TO my_role\n```",
              "footer": "Grant the privilege to create users to a role.\n```\nGRANT RENAME USER ON DBMS TO my_role\n```\nGrant the privilege to rename users to a role.\n```\nDENY ALTER USER ON DBMS TO my_role\n```\nDeny the privilege to alter users to a role.\n```\nREVOKE SET PASSWORDS ON DBMS FROM my_role\n```\nRevoke the granted and denied privileges to alter users' passwords from a role.\n```\nREVOKE GRANT SET USER STATUS ON DBMS FROM my_role\n```\nRevoke the granted privilege to alter the account status of users from a role.\n```\nGRANT SET USER HOME DATABASE ON DBMS TO my_role\n```\nGrant the privilege alter the home database of users to a role.\n```\nGRANT DROP USER ON DBMS TO my_role\n```\nGrant the privilege to delete users to a role.\n```\nREVOKE DENY SHOW USER ON DBMS FROM my_role\n```\nRevoke the denied privilege to show users from a role.\n```\nGRANT USER MANAGEMENT ON DBMS TO my_role\n```\nGrant all privileges to manage users to a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Database management privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) Database management privileges",
              "body": "```\nGRANT CREATE DATABASE ON DBMS TO my_role\n```",
              "footer": "Grant the privilege to create databases to a role.\n```\nREVOKE DENY DROP DATABASE ON DBMS FROM my_role\n```\nRevoke the denied privilege to delete databases from a role.\n```\nDENY DATABASE MANAGEMENT ON DBMS TO my_role\n```\nDeny all privileges to manage database to a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) Privilege management privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) Privilege management privileges",
              "body": "```\nGRANT SHOW PRIVILEGE ON DBMS TO my_role\n```",
              "footer": "Grant the privilege to show privileges to a role.\n```\nDENY ASSIGN PRIVILEGE ON DBMS TO my_role\n```\nDeny the privilege to assign privileges to roles to a role.\n```\nREVOKE GRANT REMOVE PRIVILEGE ON DBMS FROM my_role\n```\nRevoke the granted privilege to remove privileges from roles from a role.\n```\nREVOKE PRIVILEGE MANAGEMENT ON DBMS FROM my_role\n```\nRevoke all granted and denied privileges for manage privileges from a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "(★) DBMS privileges",
          "level": 3,
          "cards": [
            {
              "title": "(★) DBMS privileges",
              "body": "```\nGRANT ALL ON DBMS TO my_role\n```",
              "footer": "Grant privilege to perform all role management, user management, database management and privilege management to a role.",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "★ Note",
      "level": 2,
      "cards": [
        {
          "title": "★ Note",
          "body": "(★) Functionality available in Neo4j Enterprise Edition.",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    }
  ]
}