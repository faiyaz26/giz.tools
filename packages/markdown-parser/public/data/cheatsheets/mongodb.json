{
  "id": "mongodb",
  "metadata": {
    "title": "MongoDB",
    "date": "2023-04-05T00:00:00.000Z",
    "background": "bg-gradient-to-r from-green-900 via-green-600 to-green-400 hover:from-green-900 hover:via-green-700 hover:to-green-500",
    "tags": [
      "NoSQL",
      "DB"
    ],
    "categories": [
      "Database"
    ],
    "intro": "The MongoDB cheat sheet provides you with the most commonly used MongoDB commands and queries for your reference. the cheatsheet is from mongodb developers website",
    "plugins": [
      "tooltip",
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Connect MongoDB Shell",
          "level": 3,
          "cards": [
            {
              "title": "Connect MongoDB Shell",
              "body": "```mongosh\nmongo # connects to mongodb://127.0.0.1:27017 by default\n```",
              "footer": "```mongosh\nmongo --host <host> --port <port> -u <user> -p <pwd> # omit the password if you want a prompt\n```\n```mongosh\nmongo \"mongodb://192.168.1.1:27017\"\n```\n```mongosh\nmongo \"mongodb+srv://cluster-name.abcde.mongodb.net/<dbname>\" --username <username> # MongoDB Atlas\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Helpers",
          "level": 3,
          "cards": [
            {
              "title": "Helpers",
              "body": "```mongosh\ndb // prints the current database\n```",
              "footer": "Switch database :\n```mongosh\nuse <database_name>\n```\nShow collections :\n```mongosh\nshow collections\n```\nRun JavaScript file :\n```mongosh\nload(\"myScript.js\")\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Crud",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Create",
          "level": 3,
          "cards": [
            {
              "title": "Create",
              "body": "```mongosh\ndb.coll.insertOne({name: \"Max\"})\ndb.coll.insertMany([{name: \"Max\"}, {name:\"Alex\"}]) // ordered bulk insert\ndb.coll.insertMany([{name: \"Max\"}, {name:\"Alex\"}], {ordered: false}) // unordered bulk insert\ndb.coll.insertOne({date: ISODate()})\ndb.coll.insertMany({name: \"Max\"}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Delete",
          "level": 3,
          "cards": [
            {
              "title": "Delete",
              "body": "```mongosh\ndb.coll.deleteOne({name: \"Max\"})\ndb.coll.deleteMany( $and: [{name: \"Max\"}, {justOne: true}]) //delete all entries which contain both values\ndb.coll.deleteMany( $or: [{name: \"Max\"}, {justOne: true}])  //delete all entries which contain any of the specified values\ndb.coll.deleteMany({}) // WARNING! Deletes all the docs but not the collection itself and its index definitions\ndb.coll.deleteMany({name: \"Max\"}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})\ndb.coll.findOneAndDelete({\"name\": \"Max\"})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Update",
          "level": 3,
          "cards": [
            {
              "title": "Update",
              "body": "```mongosh\ndb.coll.updateMany({\"_id\": 1}, {$set: {\"year\": 2016}}) // WARNING! Replaces the entire document where \"_id\" = 1\ndb.coll.updateOne({\"_id\": 1}, {$set: {\"year\": 2016, name: \"Max\"}})\ndb.coll.updateOne({\"_id\": 1}, {$unset: {\"year\": 1}})\ndb.coll.updateOne({\"_id\": 1}, {$rename: {\"year\": \"date\"} })\ndb.coll.updateOne({\"_id\": 1}, {$inc: {\"year\": 5}})\ndb.coll.updateOne({\"_id\": 1}, {$mul: {price: 2}})\ndb.coll.updateOne({\"_id\": 1}, {$min: {\"imdb\": 5}})\ndb.coll.updateOne({\"_id\": 1}, {$max: {\"imdb\": 8}})\ndb.coll.updateMany({\"_id\": {$lt: 10}}, {$set: {\"lastModified\": ISODate()}})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Array",
          "level": 3,
          "cards": [
            {
              "title": "Array",
              "body": "```mongosh\ndb.coll.updateOne({\"_id\": 1}, {$push :{\"array\": 1}})\ndb.coll.updateOne({\"_id\": 1}, {$pull :{\"array\": 1}})\ndb.coll.updateOne({\"_id\": 1}, {$addToSet :{\"array\": 2}})\ndb.coll.updateOne({\"_id\": 1}, {$pop: {\"array\": 1}})  // last element\ndb.coll.updateOne({\"_id\": 1}, {$pop: {\"array\": -1}}) // first element\ndb.coll.updateOne({\"_id\": 1}, {$pullAll: {\"array\" :[3, 4, 5]}})\ndb.coll.updateOne({\"_id\": 1}, {$push: {scores: {$each: [90, 92, 85]}}})\ndb.coll.updateOne({\"_id\": 1, \"grades\": 80}, {$set: {\"grades.$\": 82}})\ndb.coll.updateMany({}, {$inc: {\"grades.$[]\": 10}})\ndb.coll.updateMany({}, {$set: {\"grades.$[element]\": 100}}, {arrayFilters: [{\"element\": {$gte: 100}}]})\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Update many",
          "level": 3,
          "cards": [
            {
              "title": "Update many",
              "body": "```mongosh\ndb.coll.updateMany({\"year\": 1999}, {$set: {\"decade\": \"90's\"}})\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "FindOneAndUpdate",
          "level": 3,
          "cards": [
            {
              "title": "FindOneAndUpdate",
              "body": "```mongosh\ndb.coll.findOneAndUpdate({\"name\": \"Max\"}, {$inc: {\"points\": 5}}, {returnNewDocument: true})\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Upsert",
          "level": 3,
          "cards": [
            {
              "title": "Upsert",
              "body": "```mongosh\ndb.coll.updateOne({\"_id\": 1}, {$set: {item: \"apple\"}, $setOnInsert: {defaultQty: 100}}, {upsert: true})\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Replace",
          "level": 3,
          "cards": [
            {
              "title": "Replace",
              "body": "```mongosh\ndb.coll.replaceOne({\"name\": \"Max\"}, {\"firstname\": \"Maxime\", \"surname\": \"Beugnet\"})\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Write concern",
          "level": 3,
          "cards": [
            {
              "title": "Write concern",
              "body": "```mongosh\ndb.coll.updateMany({}, {$set: {\"x\": 1}}, {\"writeConcern\": {\"w\": \"majority\", \"wtimeout\": 5000}})\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Find",
          "level": 3,
          "cards": [
            {
              "title": "Find",
              "body": "```mongosh\ndb.coll.findOne() // returns a single document\ndb.coll.find()    // returns a cursor - show 20 results - \"it\" to display more\ndb.coll.find().pretty()\ndb.coll.find({name: \"Max\", age: 32}) // implicit logical \"AND\".\ndb.coll.find({date: ISODate(\"2020-09-25T13:57:17.180Z\")})\ndb.coll.find({name: \"Max\", age: 32}).explain(\"executionStats\") // or \"queryPlanner\" or \"allPlansExecution\"\ndb.coll.distinct(\"name\")\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Count",
          "level": 3,
          "cards": [
            {
              "title": "Count",
              "body": "```mongosh\ndb.coll.estimatedDocumentCount()  // estimation based on collection metadata\ndb.coll.countDocuments({age: 32}) // alias for an aggregation pipeline - accurate count\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Comparison",
          "level": 3,
          "cards": [
            {
              "title": "Comparison",
              "body": "```mongosh\ndb.coll.find({\"year\": {$gt: 1970}})\ndb.coll.find({\"year\": {$gte: 1970}})\ndb.coll.find({\"year\": {$lt: 1970}})\ndb.coll.find({\"year\": {$lte: 1970}})\ndb.coll.find({\"year\": {$ne: 1970}})\ndb.coll.find({\"year\": {$in: [1958, 1959]}})\ndb.coll.find({\"year\": {$nin: [1958, 1959]}})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Logical",
          "level": 3,
          "cards": [
            {
              "title": "Logical",
              "body": "```mongosh\ndb.coll.find({name:{$not: {$eq: \"Max\"}}})\ndb.coll.find({$or: [{\"year\" : 1958}, {\"year\" : 1959}]})\ndb.coll.find({$nor: [{price: 1.99}, {sale: true}]})\ndb.coll.find({\n$and: [\n    {$or: [{qty: {$lt :10}}, {qty :{$gt: 50}}]},\n{$or: [{sale: true}, {price: {$lt: 5 }}]}\n]\n})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Element",
          "level": 3,
          "cards": [
            {
              "title": "Element",
              "body": "```mongosh\ndb.coll.find({name: {$exists: true}})\ndb.coll.find({\"zipCode\": {$type: 2 }})\ndb.coll.find({\"zipCode\": {$type: \"string\"}})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Aggregation Pipeline",
          "level": 3,
          "cards": [
            {
              "title": "Aggregation Pipeline",
              "body": "```mongosh\ndb.coll.aggregate([\n{$match: {status: \"A\"}},\n{$group: {_id: \"$cust_id\", total: {$sum: \"$amount\"}}},\n{$sort: {total: -1}}\n])\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Text search with a \"text\" index",
          "level": 3,
          "cards": [
            {
              "title": "Text search with a \"text\" index",
              "body": "```mongosh\ndb.coll.find({$text: {$search: \"cake\"}}, {score: {$meta: \"textScore\"}}).sort({score: {$meta: \"textScore\"}})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Regex",
          "level": 3,
          "cards": [
            {
              "title": "Regex",
              "body": "```mongosh\ndb.coll.find({name: /^Max/}) // regex: starts by letter \"M\"\ndb.coll.find({name: /^Max$/i}) // regex case insensitive\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Array",
          "level": 3,
          "cards": [
            {
              "title": "Array",
              "body": "```mongosh\ndb.coll.find({tags: {$all: [\"Realm\", \"Charts\"]}})\ndb.coll.find({field: {$size: 2}}) // impossible to index - prefer storing the size of the array & update it\ndb.coll.find({results: {$elemMatch: {product: \"xyz\", score: {$gte: 8}}}})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Projections",
          "level": 3,
          "cards": [
            {
              "title": "Projections",
              "body": "```mongosh\ndb.coll.find({\"x\": 1}, {\"actors\": 1}) // actors + \\_id\ndb.coll.find({\"x\": 1}, {\"actors\": 1, \"\\_id\": 0}) // actors\ndb.coll.find({\"x\": 1}, {\"actors\": 0, \"summary\": 0}) // all but \"actors\" and \"summary\"\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Sort, skip, limit",
          "level": 3,
          "cards": [
            {
              "title": "Sort, skip, limit",
              "body": "```mongosh\ndb.coll.find({}).sort({\"year\": 1, \"rating\": -1}).skip(10).limit(3)\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Read Concern",
          "level": 3,
          "cards": [
            {
              "title": "Read Concern",
              "body": "```mongosh\ndb.coll.find().readConcern(\"majority\")\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Databases and Collections {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Drop",
          "level": 3,
          "cards": [
            {
              "title": "Drop",
              "body": "```mongosh\ndb.coll.drop()    // removes the collection and its index definitions\ndb.dropDatabase() // double check that you are *NOT* on the PROD cluster... :-)\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Create Collection",
          "level": 3,
          "cards": [
            {
              "title": "Create Collection",
              "body": "```mongosh\ndb.createCollection(\"contacts\", {\n   validator: {$jsonSchema: {\n      bsonType: \"object\",\n      required: [\"phone\"],\n      properties: {\n         phone: {\n            bsonType: \"string\",\n            description: \"must be a string and is required\"\n         },\n         email: {\n            bsonType: \"string\",\n            pattern: \"@mongodb\\.com$\",\n            description: \"must be a string and match the regular expression pattern\"\n         },\n         status: {\n            enum: [ \"Unknown\", \"Incomplete\" ],\n            description: \"can only be one of the enum values\"\n         }\n      }\n   }}\n})\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Other Collection Functions",
          "level": 3,
          "cards": [
            {
              "title": "Other Collection Functions",
              "body": "```mongosh\ndb.coll.stats()\ndb.coll.storageSize()\ndb.coll.totalIndexSize()\ndb.coll.totalSize()\ndb.coll.validate({full: true})\ndb.coll.renameCollection(\"new_coll\", true) // 2nd parameter to drop the target collection if exists\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Indexes {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Basics",
          "level": 3,
          "cards": [
            {
              "title": "Basics",
              "body": "",
              "footer": "#### List\n\n```mongosh\ndb.coll.getIndexes()\ndb.coll.getIndexKeys()\n```\n\n#### Drop Indexes\n\n```mongosh\ndb.coll.dropIndex(\"name_1\")\n```\n\n#### Hide/Unhide Indexes\n\n```mongosh\ndb.coll.hideIndex(\"name_1\")\ndb.coll.unhideIndex(\"name_1\")\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Create Indexes",
          "level": 3,
          "cards": [
            {
              "title": "Create Indexes",
              "body": "```mongosh\n// Index Types\ndb.coll.createIndex({\"name\": 1})                // single field index\ndb.coll.createIndex({\"name\": 1, \"date\": 1})     // compound index\ndb.coll.createIndex({foo: \"text\", bar: \"text\"}) // text index\ndb.coll.createIndex({\"$**\": \"text\"})            // wildcard text index\ndb.coll.createIndex({\"userMetadata.$**\": 1})    // wildcard index\ndb.coll.createIndex({\"loc\": \"2d\"})              // 2d index\ndb.coll.createIndex({\"loc\": \"2dsphere\"})        // 2dsphere index\ndb.coll.createIndex({\"_id\": \"hashed\"})          // hashed index\n\n// Index Options\ndb.coll.createIndex({\"lastModifiedDate\": 1}, {expireAfterSeconds: 3600})      // TTL index\ndb.coll.createIndex({\"name\": 1}, {unique: true})\ndb.coll.createIndex({\"name\": 1}, {partialFilterExpression: {age: {$gt: 18}}}) // partial index\ndb.coll.createIndex({\"name\": 1}, {collation: {locale: 'en', strength: 1}})    // case insensitive index with strength = 1 or 2\ndb.coll.createIndex({\"name\": 1 }, {sparse: true})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Others {.cols-2}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Handy commands",
          "level": 3,
          "cards": [
            {
              "title": "Handy commands",
              "body": "```mongosh\nuse admin\ndb.createUser({\"user\": \"root\", \"pwd\": passwordPrompt(), \"roles\": [\"root\"]})\ndb.dropUser(\"root\")\ndb.auth( \"user\", passwordPrompt() )\n\nuse test\ndb.getSiblingDB(\"dbname\")\ndb.currentOp()\ndb.killOp(123) // opid\n\ndb.fsyncLock()\ndb.fsyncUnlock()\n\ndb.getCollectionNames()\ndb.getCollectionInfos()\ndb.printCollectionStats()\ndb.stats()\n\ndb.getReplicationInfo()\ndb.printReplicationInfo()\ndb.isMaster()\ndb.hostInfo()\ndb.printShardingStatus()\ndb.shutdownServer()\ndb.serverStatus()\n\ndb.setSlaveOk()\ndb.getSlaveOk()\n\ndb.getProfilingLevel()\ndb.getProfilingStatus()\ndb.setProfilingLevel(1, 200) // 0 == OFF, 1 == ON with slowms, 2 == ON\n\ndb.enableFreeMonitoring()\ndb.disableFreeMonitoring()\ndb.getFreeMonitoringStatus()\n\ndb.createView(\"viewName\", \"sourceColl\", [{$project:{department: 1}}])\n```",
              "footer": "",
              "spanConfig": "row-span-3",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Replica Set",
          "level": 3,
          "cards": [
            {
              "title": "Replica Set",
              "body": "```mongosh\nrs.status()\nrs.initiate({\"_id\": \"replicaTest\",\n  members: [\n    { _id: 0, host: \"127.0.0.1:27017\" },\n    { _id: 1, host: \"127.0.0.1:27018\" },\n    { _id: 2, host: \"127.0.0.1:27019\", arbiterOnly:true }]\n})\nrs.add(\"mongodbd1.example.net:27017\")\nrs.addArb(\"mongodbd2.example.net:27017\")\nrs.remove(\"mongodbd1.example.net:27017\")\nrs.conf()\nrs.isMaster()\nrs.printReplicationInfo()\nrs.printSlaveReplicationInfo()\nrs.reconfig(<valid_conf>)\nrs.slaveOk()\nrs.stepDown(20, 5) // (stepDownSecs, secondaryCatchUpPeriodSecs)\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Sharded Cluster",
          "level": 3,
          "cards": [
            {
              "title": "Sharded Cluster",
              "body": "```mongosh\nsh.status()\nsh.addShard(\"rs1/mongodbd1.example.net:27017\")\nsh.shardCollection(\"mydb.coll\", {zipcode: 1})\n\nsh.moveChunk(\"mydb.coll\", { zipcode: \"53187\" }, \"shard0019\")\nsh.splitAt(\"mydb.coll\", {x: 70})\nsh.splitFind(\"mydb.coll\", {x: 70})\nsh.disableAutoSplit()\nsh.enableAutoSplit()\n\nsh.startBalancer()\nsh.stopBalancer()\nsh.disableBalancing(\"mydb.coll\")\nsh.enableBalancing(\"mydb.coll\")\nsh.getBalancerState()\nsh.setBalancerState(true/false)\nsh.isBalancerRunning()\n\nsh.addTagRange(\"mydb.coll\", {state: \"NY\", zip: MinKey }, { state: \"NY\", zip: MaxKey }, \"NY\")\nsh.removeTagRange(\"mydb.coll\", {state: \"NY\", zip: MinKey }, { state: \"NY\", zip: MaxKey }, \"NY\")\nsh.addShardTag(\"shard0000\", \"NYC\")\nsh.removeShardTag(\"shard0000\", \"NYC\")\n\nsh.addShardToZone(\"shard0000\", \"JFK\")\nsh.removeShardFromZone(\"shard0000\", \"NYC\")\nsh.removeRangeFromZone(\"mydb.coll\", {a: 1, b: 1}, {a: 10, b: 10})\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Change Streams",
          "level": 3,
          "cards": [
            {
              "title": "Change Streams",
              "body": "```mongosh\nwatchCursor = db.coll.watch( [ { $match : {\"operationType\" : \"insert\" } } ] )\n\nwhile (!watchCursor.isExhausted()){\n   if (watchCursor.hasNext()){\n      print(tojson(watchCursor.next()));\n   }\n}\n```",
              "footer": "",
              "spanConfig": "row-span-1",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    }
  ]
}