{
  "id": "django",
  "metadata": {
    "title": "Django",
    "date": "2024-05-15T10:12:25.000Z",
    "background": "bg-[#214a35]",
    "label": "Python",
    "tags": [
      "python",
      "web"
    ],
    "categories": [
      "Programming"
    ],
    "intro": "A Django cheat sheet.\n",
    "plugins": [
      "copyCode"
    ]
  },
  "sections": [
    {
      "title": "Getting Started",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Start a new Django Project",
          "level": 3,
          "cards": [
            {
              "title": "Start a new Django Project",
              "body": "```python\n# Create et access project folder\n~$  mkdir project_name\n~$  cd project_name\n\n# Create Python virtual env\n~$  python3 -m venv venv\n\n# Activate virtual env\n~$  source venv/bin/activate\n\n# If you want to deactivate virtual env\n~$  deactivate\n\n# Install django (~= same as 4.2.*)\n~$  pip install django~=4.2.0\n\n# New django project (from project_name folder)\n~$  django-admin startproject config\n\n# Create app (from project_name folder)\n~$  python manage.py startapp app_name\n```",
              "footer": "",
              "spanConfig": "row-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Migration:",
          "level": 3,
          "cards": [
            {
              "title": "Migration:",
              "body": "```python\n~$  python manage.py makemigrations\n```",
              "footer": "Migrate: Will read the migrations files and create the actual database and tables\n```python\n~$  python manage.py migrate\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Create superuser for authenficiation/admin panel",
          "level": 3,
          "cards": [
            {
              "title": "Create superuser for authenficiation/admin panel",
              "body": "```python\n~$  python manage.py createsuperuser\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Start server",
          "level": 3,
          "cards": [
            {
              "title": "Start server",
              "body": "```python\n~$  python manage.py runserver  => ex.  http://127.0.0.1:8000\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Requirements",
          "level": 3,
          "cards": [
            {
              "title": "Requirements",
              "body": "```python\n# Create a requirements file that contain all your project dependencies\n~$  pip freeze > requirements.txt\n\n# Install your project requirements (if a requirements file exist)\n~$  pip install -r requirements.txt\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Other commands",
          "level": 3,
          "cards": [
            {
              "title": "Other commands",
              "body": "```python\n# Django shell (Run project code directly)\n~$ python manage.py shell\n\n# example of code to run in the shell:\n >>> from app_name.models import User\n >>> user1 = User.objects.first()\n\n# Prepare static folders for production\n~$ python manage.py collectstatic\n\n# Take all data from app blog and export in json\n~$ python manage.py dumpdata blog > myapp.json\n\n# Take all data in json file and import in app data table\n~$ python manage.py loaddata myapp.json\n\n# To Create or Update a message file for Translation, run this command\n~$ django-admin makemessages -l de\n# Updating message files\n~$ django-admin compilemessages\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Project config {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Configuration settings",
          "level": 3,
          "cards": [
            {
              "title": "Configuration settings",
              "body": "```python\n# Add app to settings.py\nINSTALLED_APPS = [\n         … ,\n         'app_name.apps.App_nameConfig',\n ]\n\n# template directory config\nProject templates settings.py:\n    TEMPLATES = [\n        { …\n           'DIRS': [BASE_DIR / 'templates'],\n        … }\n\n# Static folder:\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [ BASE_DIR / 'static' ]\nSTATIC_ROOT = 'static_root'\n# Media folder:\nMEDIA_URL = '/media/'\nSTATICFILES_DIRS = (\n    (BASE_DIR / 'static'),\n)\nMEDIA_ROOT = BASE_DIR / 'media'\n\n# To use PostgresSQL\n# pip install psycopg2\n# settings.py\nDATABASE = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'blog',\n        'USER': 'admin',\n        'PASSWORD': '123456',\n        'HOST': 'localhost',\n        'PORT': '5432'\n        }\n    }\n\nTIME_INPUT_FORMATS = [\n    '%H:%M:%S',     # '14:30:59'\n    '%H:%M',        # '14:30'\n]\n\nDATE_FORMAT = \"Y/M/d\"\n\n# locale for Translations\nLANGUAGES = [\n    ('en', 'English'),\n    ('de', 'German'),\n]\n\nLOCALE_PATHS = (\n    BASE_DIR / 'locale',\n)\n\n# CK Editor Configuration\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_RESTRICT_BY_USER = True\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_NONIMGE_FILES = True\nCKEDITOR_IMAGE_BACKEND = \"pillow\"\nCKEDITOR_CONFIGS = {\n    'default': {\n        'toolbar': 'full',\n    }}\n\n# SSL\n# If you have an SSL certificate\nSECURE_SSL_REDIRECT = True\n# cookies will only be sent via HTTPS connections\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Data Models",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Create Data Model",
          "level": 3,
          "cards": [
            {
              "title": "Create Data Model",
              "body": "<small>Theses models can be created as database tables with the migrations commands</small>\n\n```python\n# models.py\n# The id fields is automaticly created by Django\n# for each model that why it's not show below\nfrom django.db import models\n\nclass Customer(models.Model)\n    name = models.Charfield('Customer', max_length=120)\n    age = models.IntegerField()\n    note = models.TextField(blank=True, null = True)\n    email = models.EmailField(max_length=255, blank=True, null=True)\n    credit = models.FloatField(blank=True)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    img = models.ImageField(upload_to ='uploads/')\n    # Select Field (return value, display value)\n    TYPE_CHOICES = (\n        ('Customer', _('Customer')),\n        ('Supplier', _('Supplier')),\n        ('Student', _('Student')),\n    )\n    type = models.CharField(choices=TYPE_CHOICES)\n\n    class Meta:\n        verbose_name = \"Customer\"\n        verbose_name_plural = \"Customers\"\n\n    # Model string representation\n    def __str__(self):\n        return self.name\n\n    # the URL that points to a resource or page on your website\n    def get_absolute_url(self):\n        return reverse(\"customer_detail\", kwargs={\"pk\": self.pk})\n```",
              "footer": "#### We can also use this method to define the ChoiceField value.\n\n```python\n  class Customer(models.Model)\n    class TypeList(models.IntegerChoices):\n        customer = (1, _('Customer'))\n        supplier = (2, _('Supplier'))\n        student = (3, _('Student'))\n    .\n    .\n    .\n    type = models.CharField(choices=TypeList.choices, default=1)\n```\n\n#### To access the ChoiceField value in the template, we need to do the following in the template:\n\n- In Django templates you can use the \"`get_FOO_display()`\" method, that will return the readable alias for the field,\n  where `'FOO'` is the name of the field.\n- If the choices are stored in the variable `CHOICES` and the model field storing the selected choice is `'type'` then\n  you can directly use\n\n```html\n<!-- Here, X is the model instance -->\n{{ X.get_type_display }}\n\n<!-- You can even use this method to display its translation. -->\n{% trans X.get_type_display %}\n```\n\n#### Relationship between models\n\n```python\n# One-to-Many: (use double quotes if the entity is not yet declare) ex. \"Supplier\"\nsupplier = models.ForeignKey(Supplier, blank=True, null=True, on_delete=models.CASCADE,related_name=\"supplierother\")\n\n# on_delete can be set to models.CASCADE, models.ST_DEFAULT or models.SET_NULL\n# The related_name attribute specifies the name of the reverse relation from the supplier model back to your model\n\n# Many-to-Many:\ntags = models.ManyToManyField(Tag, blank=True)\n\n# One to One\nUser = models.OneToOneField(User, on_delete=models.CASCADE)\n\n# Overwrite save method\ndef save(self, (*args, **kwargs):\n    if not self.slug:\n        self.slug = slugify(self.title)\n    super().save(*args, **kwargs)\n```",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Lookup",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Field Lookups",
          "level": 3,
          "cards": [
            {
              "title": "Field Lookups",
              "body": "```python\n# 1. Exact Match Lookup:\nBook.objects.filter(title__exact='Python Tricks')\n# 2. Case-insensitive Lookup:\nBook.objects.filter(title__iexact='python tricks')\n# 3. Contains Lookup:\nBook.objects.filter(title__contains='Python')\n# 4. Startswith Lookup:\nBook.objects.filter(title__startswith='Python')\n# 5. Endswith Lookup:\nBook.objects.filter(title__endswith='Tricks')\n```",
              "footer": "",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Field Lookups Reference",
          "level": 3,
          "cards": [
            {
              "title": "Field Lookups Reference",
              "body": "| Keyword        | Description                                      |\n| -------------- | :----------------------------------------------- |\n| `contains`     | Contains the phrase                              |\n| `icontains`    | Same as contains, but case-insensitive           |\n| `date`         | Matches a date                                   |\n| `day`          | Matches a date (day of month, 1-31) (for dates)  |\n| `endswith`     | Ends with                                        |\n| `iendswith`    | Same as endswidth, but case-insensitive          |\n| `exact`        | An exact match                                   |\n| `iexact`       | Same as exact, but case-insensitive              |\n| `in`           | Matches one of the values                        |\n| `isnull`       | Matches NULL values                              |\n| `gt`           | Greater than                                     |\n| `gte`          | Greater than, or equal to                        |\n| `hour`         | Matches an hour (for datetimes)                  |\n| `lt`           | Less than                                        |\n| `lte`          | Less than, or equal to                           |\n| `minute`       | Matches a minute (for datetimes)                 |\n| `month`        | Matches a month (for dates)                      |\n| `quarter`      | Matches a quarter of the year (1-4) (for dates)  |\n| `range`        | Match between                                    |\n| `regex`        | Matches a regular expression                     |\n| `iregex`       | Same as regex, but case-insensitive              |\n| `second`       | Matches a second (for datetimes)                 |\n| `startswith`   | Starts with                                      |\n| `istartswith`  | Same as startswith, but case-insensitive         |\n| `time`         | Matches a time (for datetimes)                   |\n| `week`         | Matches a week number (1-53) (for dates)         |\n| `week_day`     | Matches a day of week (1-7) 1 is Sunday          |\n| `iso_week_day` | Matches a ISO 8601 day of week (1-7) 1 is Monday |\n| `year`         | Matches a year (for dates)                       |\n| `iso_year`     | Matches an ISO 8601 year (for dates)             |",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Admin Panel",
          "level": 3,
          "cards": [
            {
              "title": "Admin Panel",
              "body": "```python\nfrom django.contrib import admin\nfrom app_name.models import Blog\n\n# Custom model Admin (admin.py):\n@admin.register(Blog)   # Register app\nclass BlogAdmin(admin.ModelAdmin)\n    fields = (\"title\", \"description\") # Fields to use for add/edit/show page\n    list_display = (\"title\", \"description\") # fields to display in search page\n    list_display_links = (\"title\",) # fields that will be a link in search page\n    ordering = (\"date_created\",) # Ordering allowed in the search page\n    search_fields = (\"title\", \"description\") # Search fields allowed in the search page\n    list_filter =(\"title\",) # define list filters that appear in the right sidebar\n```",
              "footer": "",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Routing",
          "level": 3,
          "cards": [
            {
              "title": "Routing",
              "body": "```python\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls), # pre-created admin urls routes\n    path('', include('app_name.urls')) # include your app urls\n]\n```",
              "footer": "The 'include()' method allow to link another urls.py file created in your app folder (app_name/urls.py)\n```python\nfrom django.urls import path\nfrom app_name import views\nurlpatterns = [\npath('posts', views.index, name='posts.index'),\npath('posts/create/', views.create, name='posts.create',\npath('posts/<int:id>/', views.show, name='posts.show'),\npath('posts/<int:id>/edit/', views.edit, name='posts.edit'),\npath('posts/<int:id>/delete/', views.delete, name='posts.delete'),\npath('posts/<int:id>/<int:state>/', views.status, name='posts.status'), # two arguments\n]\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Static Route and Customize Admin Panel {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Customizing Admin Panel",
          "level": 3,
          "cards": [
            {
              "title": "Customizing Admin Panel",
              "body": "```python\n# add in project/urls.py\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [  ...  ]\n\nif settings.DEBUG == True:\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n# Customize Admin Panel Header & Title\nadmin.site.site_header = _('Administrator Control Panel')\nadmin.site.site_title = _('Administrator Control Panel')\nadmin.site.index_title = _('Wellcome to Control Panel')\n\n# Costomize 404 Template page\nhandler404 = 'app_name.views.handler404'\nhandler500 = 'app_name.views.handler500'\nhandler503 = 'app_name.views.handler503'\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Views {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Function Based Views",
          "level": 3,
          "cards": [
            {
              "title": "Function Based Views",
              "body": "```python\n# views.py\nfrom django.shortcuts import render, redirect\nfrom app_name.models import Post\nfrom app_name.forms import PostForm\n\ndef index(request):\n    # Get all Posts\n    posts = Post.objects.all()\n\n    # Render app template with context\n    return render(request, 'appfolder/index.html', {'posts': posts})\n\ndef show(request, id):\n    post = Post.objects.get(id=id)\n    return render(request, 'appfolder/show.html', {'post': post})\n\ndef create(request):\n    form = PostForm(request.POST or None, request.FILES or None)\n    # When the form contains an image or file field, we should use request.FILES\n    if form.is_valid():\n        # optionally we can access form data with form.cleaned_data['first_name']\n        post = form.save(commit=False)\n        post.user = request.user\n        post.save()\n        return redirect('/posts')\n\n    return render(request, 'appfolder/create.html', {'form': form)\n\ndef edit(request, id):\n    post = Post.objects.get(id=id)\n    form = PostForm(request.POST or None, request.FILES or None, instance=post)\n    if form.is_valid():\n        form.save()\n        return redirect('/posts')\n\n    return render(request, 'appfolder/edit.html', {'form': form)\n\ndef delete(request, id):\n    post = Post.objects.get(id=id)\n    post.delete()\n    return redirect('/posts')\n\ndef status(request, id, state):\n    post = Post.objects.get(id=id, state=state)\n    return redirect('appfolder/status.html', {'post': post})\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Class Based Views",
          "level": 3,
          "cards": [
            {
              "title": "Class Based Views",
              "body": "```python\nfrom django.views.generic import TemplateView, ListView, DetailView,\n           CreateView, UpdateView, DeleteView\n\nclass LandingPageView(TemplateView):\n    template_name = 'landing.html'\n\n    # Optional: Change context data dict\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['title'] = 'Landing Page'\n        return context\n\nclass PostsListView(ListView):\n    queryset = Post.objects.all()\n    # Optional\n    # context_object_name = \"posts\" (default: post_list)\n    # template_name = 'posts.html' (default: posts/post_list.html)\n\nclass PostsDetailView(DetailView):\n    model = Post # object var in template\n    # Optional\n    # template_name = 'post.html' (default: posts/post_detail.html)\n\nclass PostsCreateView(CreateView):\n    form_class = PostForm\n    template_name = 'posts/post_create.html' # no default value\n\n    def get_success_url(self):\n        return reverse('posts-list')\n\n    # Optional: Overwrite form data (before save)\n    def form_valid(self, form):\n        if self.request.user.is_authenticated:\n            from.instance.author = self.request.user\n        return super().form_valid(form)\n\nclass PostsUpdateView(UpdateView):\n    model = Post\n    form_class = PostForm\n    template_name = 'posts/post_update.html'\n\n    def get_success_url(self):\n        return reverse('post-list')\n\n    # Optional: Change context data dict\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['submit_text'] = 'Update'\n        return context\n\nclass PostsDeleteView(DeleteView):\n    model = Post\n    template_name = 'posts/post_delete.html'\n    success_url = reverse_lazy('posts-list')\n\n# Urls.py route declaration\npath('<int:pk>/update/', PostsUpdateView.as_view(), name='post-update')\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Templates",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Basic Template",
          "level": 3,
          "cards": [
            {
              "title": "Basic Template",
              "body": "```html\n<!-- Extend from another template -->\n<!-- can use the same parts of your HTML for different template -->\n{% extends 'base.html' %}\n\n<!-- A part of the parent template that is defined and is replaced by a part in the child template -->\n{% block contents %} {% endblock contents %}\n\n<!-- include template-->\n{% include 'partials/header.html' %}\n<!-- include template with One or More Parameters -->\n{% include 'body.html' with key1=value1 key2=value2 %}\n\n<!-- If statement in template -->\n{% if user.username = 'Mike' %}\n<p>Hello Admin</p>\n{% elif user.username = 'john' %}\n<p>Hello John Doe</p>\n{% else %}\n<p>Hello User</p>\n{% endif %}\n\n<!-- for loop in template -->\n{% for product in products %}\n<p>row: {{ forloop.counter }} # starting index 1 {{ forloop.counter0 }} # starting index 0</p>\n<p>The product name is {{ product.name }}</p>\n<p></p>\n<p>The product name is {{ product.price }}</p>\n<p>\n  {% endfor %}\n\n  <!-- Access to the variable in the template -->\n  {{ var_name }}\n\n  <!-- Template variables formating  -->\n  {{ title | lower }} {{ blog.post | truncatwords:50 }} {{ order.date | date:\"D M Y\" }} {{ list_items | slice:\":3\" }} {{\n  total | default:\"nil\" }}\n\n  <!-- Current path (ex. posts/1/show) -->\n  {{ request.path }}\n\n  <!-- URL by name with param -->\n  {% url 'posts.delete' id=post.id %}\n\n  <!-- Use static in template: -->\n  {% load static %} {% static 'css/main.css' %}\n\n  <!-- Define the variable in the template -->\n  {% with name=\"World\" %}\n  <html>\n    <div>Hello {{ name }}!</div>\n  </html>\n  {% endwith %}\n\n  <!-- Template translate text -->\n  {% load i18n %}\n  <title>{% trans \"This is the title.\" %}</title>\n  <!-- Use variable translate in the template -->\n  <title>{% trans object.title %}</title>\n\n  <!-- Define the list in the template -->\n  <input type=\"number\" {% if product.unit in 'kg,milligram,milliliter' %} step=\"0.01\" {% else %} step=\"1\" {% endif %}>\n\n  <!-- Safely Pass Data to JavaScript in a Django Template: -->\n  <!--+ Use data attributes for simple values -->\n  <script data-username=\"{{ username }}\">\n    const data = document.currentScript.dataset;\n    const username = data.username;\n  </script>\n\n  <!-- + Separate script files: can use document.currentScript for separate script files -->\n  <script src=\"{% static 'index.js' %}\" data-username=\"{{ username }}\"></script>\n\n  <!-- + Case conversion -->\n  <script src=\"{% static 'index.js' %}\" data-full-name=\"{{ full_name }}\"></script>\n  <!--  Read it in JavaScript as fullName: -->\n  <script>\n    const data = document.currentScript.dataset;\n    const fullName = data.fullName;\n  </script>\n\n  <!-- + Non-string types -->\n  <script src=\"{% static 'index.js' %}\" data-follower-count=\"{{ follower_count }}\"></script>\n\n  <!--  parseInt() to convert this value from a string: -->\n  <script>\n    const data = document.currentScript.dataset;\n    const followerCount = parseInt(data.followerCount, 10);\n  </script>\n\n  <!-- + There’s no limit: A <script> can have as many data attributes as you like: -->\n  <script\n    src=\"{% static 'index.js' %}\"\n    defer\n    data-settings-url=\"{% url 'settings' %}\"\n    data-configuration-url=\"{% url 'configuration' %}\"\n    data-options-url=\"{% url 'options' %}\"\n    data-preferences-url=\"{% url 'preferences' %}\"\n    data-setup-url=\"{% url 'setup' %}\"\n  ></script>\n</p>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Custom Template Tags and Filters",
          "level": 3,
          "cards": [
            {
              "title": "Custom Template Tags and Filters",
              "body": "```\napp_name/\n└─── templatetags/\n     └─── basetags.py\n     __init__.py\n     models.py\n     views.py\n```",
              "footer": "- And in your template you would use the following:\n```html\n{% load basetags %}\n```\n- the module must contain a module-level variable named register that is a template.Library instance, in which all the\ntags and filters are registered. So, near the top of your module, put the following:",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Writing custom template filters",
          "level": 3,
          "cards": [
            {
              "title": "Writing custom template filters",
              "body": "```python\n# basetags.py\nfrom django import template\n\nregister = template.Library()\n\n@register.filter(name=\"cut\")\ndef cut(value, arg):\n    \"\"\"Removes all values of arg from the given string\"\"\"\n    return value.replace(arg, \"\")\n\n# Most filters don’t take arguments. In this case, leave the argument out of your function\n@register.filter()\ndef lower(value): # Only one argument.\n    \"\"\"Converts a string into all lowercase\"\"\"\n    return value.lower()\n\n@register.simple_tag\ndef to_class_name(object):\n    return str(object.__class__.__name__)\n\n# Template\n# And here’s an example of how that filter would be used in Template:\n{{ somevariable | cut:\"0\" }}\n\n# Put the result of simple tag into a variable\n{% to_class_name object as objectmodel %}\n<p>Model Class Name: {{ objectmodel }}</p>\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Context Processor {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Creating custom Context Processor",
          "level": 3,
          "cards": [
            {
              "title": "Creating custom Context Processor",
              "body": "```\nproject_name\n└───app_name\n    ├───...\n    └───context_processors.pyy\n```",
              "footer": "Create a function in context_processors.py that accepts a HttpRequest object as an argument and returns a dictionary\nA context processor is just a function that accepts an HttpRequest object as an argument and returns a dictionary. Like\nthis:\n```python\ndef site_email(request):\nreturn { 'site_email' : 'example@gmail.com' }\n```\n3. Add this to your context_processors setting in settings.py (at the bottom for security reasons)\n```python\nTEMPLATES = [\n{ …\n'OPTIONS': {\n'context_processors': [\n…\n'app_name.context_processors.site_email',\n…\n],\n… },\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Model Managers and Querysets",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Model Manager",
          "level": 3,
          "cards": [
            {
              "title": "Model Manager",
              "body": "```python\n# One line create and save\nArticle.objects.create(name='Item 1', price=19.95)\n\n# Read all\nArticle.objects.all()\n\n# Create\nuser = User.objects.first()\narticle = Article(user=user, name='Item 1', price=19.95)\n\n# Save\narticle.save()\n\n# Read one\nArticle.objects.get(id=1)\n\n# Select Related (to avoid n+1 query)\nposts = Post.objects.select_related('user', 'category').all()\n\n# Read or render a 404 not found page\nfrom django.shortcuts import get_object_or_404\narticle = get_object_or_404(Article, id=512)\n\n# Filter\nArticle.objects.filter(model='dyson', name__icontains='dyson') # __icontains\nArticle.objects.filter(year__gt=2016) # __gt = greater than\nArticle.objects.filter(year__lt=2001) # __lt = less than\n\n# Filter on relationship sub model field\nArticle.objects.get(user__username='mike')\n\n# Ordering\nArticle.objects.order_by('name')     # ascending\nArticle.objects.order_by('-name')   # descending\n\n# Slicing return first\nArticle.objects.all().order_by('name')[0]\n\n# Slicing return last\nArticle.objects.all().order_by('-name')[0]\n\n# Slicing limit/offset\nArticle.objects.all().order_by('name')[1..10]\n\n# Updating\narticle = Article.objects.first()\narticle.name = 'new name'\narticle.save()\n\n# One line update\nArticle.objects.filter(id=4).update(name='new name')\n\n# Deleting\narticle = Article.objects.first()\narticle.delete()\n\n# One line delete\narticle.objects.get(id=1).delete()\n\n# Delete all\nArticle.objects.all().delete()\n\n# Set ForeignKey field value\nmodel1 = Model(name='dyson')\narticle.model = model1\n\n# Get ForeignKey value\narticle1.model.name\nmodel1.article_set.all()\n\n# Add Many-to-Many\narticle1.tags.add(tag1)\narticle1.tags.all()\ntag1.articles_set.all()\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Form",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Form creation",
          "level": 3,
          "cards": [
            {
              "title": "Form creation",
              "body": "```python\n# app_name/forms.py\nfrom django import forms\nclass ArticleForm(forms.Form):\n    name = forms.Charfield(max_length=100)\n    description = forms.Charfield(blank=True, null = True)\n\n# Model Form\nfrom django.forms import ModelForm\nfrom app_name.models import Article\nclass ArticleForm(ModelForm):\n    class Meta:\n        model = Article\n        fields = ['name', 'description', 'price'] # Use '__all__' for all fields\n        widgets = {\n            'name': forms.TextInput(attrs={'class': 'form-control'}),\n        }\n        labels = {\n            'name': 'First Name',\n        }\n        error_messages = {\n            'name': {'required': 'This field is required',},\n            }\n        help_texts = {\n        'name': 'Enter Your First Name',\n        }\n```",
              "footer": "```html\n<!-- Render form in template -->\n<form method=\"“post”\" action=\"“”\" novalidate>\n{% csrf_token %} {{ form }}\n<button type=\"submit\">Submit</button>\n</form>\n```\n- NOTE: If the form contains a file field, your form MUST contain `enctype=\"multipart/form-data\"`, eg:\n```html\n<form action=\"\" method=\"post\" enctype=\"multipart/form-data\">\n{% csrf_token %} {{ form.as_p }}\n<button type=\"submit\">{% trans 'Submit' %}</button>\n</form>\n```\n```bash\npip install crispy-tailwind\n```\n```python\nINSTALLED_APPS = (\n...\n\"crispy_forms\",\n\"crispy_tailwind\",\n...\n)\nCRISPY_ALLOWED_TEMPLATE_PACKS = 'tailwind'\nCRISPY_TEMPLATE_PACK = 'tailwind'\n```\n```html\n<!-- template usage -->\n{% load tailwind_filters %} {{ form|crispy }}\n```",
              "spanConfig": "col-span-2",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Form Validation",
          "level": 3,
          "cards": [
            {
              "title": "Form Validation",
              "body": "```python\n# forms.py\nfrom django.core.exceptions import ValidationError\n\n# field validation\ndef clean_first_name(self):\n    data = self.cleaned_data['first_name']\n    if data = 'Mike':\n        raise ValidationError('Your name must not be Mike')\n    return data\n\n# form validation\ndef clean(self):\n    first_name = self.cleaned_data['first_name']\n    last_name = self.cleaned_data['last_name']\n    if first_name + last_name = 'MikeTaylor':\n        raise ValidationError('Your name must not be Mike Taylor')\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Flash messages {.cols-1}",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Displaying messages",
          "level": 3,
          "cards": [
            {
              "title": "Displaying messages",
              "body": "```python\n# Message tags\n# debug, info, success, warning and error\n\nmessages.success(request, 'Login successful')\nmessages.error(request, 'Login error')\n```",
              "footer": "```html\n<!-- Display flash messages in template -->\n{% if messages %} {% for message in messages %} {% message %} {% message.tags %}\n{% endfor %} {% endif %}\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "User Model",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Pre-created",
          "level": 3,
          "cards": [
            {
              "title": "Pre-created",
              "body": "```python\n# Get a reference to Django pre-created User model\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\n# Or if you want to custom user model\nfrom django.contrib.auth.models import AbstractUser\n\nclass User(AbstractUser):\n    # add custom fields and methods\n\n# To make Django use that model go to settings.py and add: AUTH_USER_MODEL = 'app_name.User'\n```",
              "footer": "",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Authentication",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Authentication : LoginView",
          "level": 3,
          "cards": [
            {
              "title": "Authentication : LoginView",
              "body": "```python\n# LoginView is already pre-created by Django\nfrom django.contrib.auth.views import LoginView\n\n# Add a url to reach that view\npath('login/', LoginView.as_view(), name='login')\n\n# By default the LoginView will try to open a template name 'registration/login.html' and send a login form with it.\n```",
              "footer": "#### Authentication : LogoutView\n\n```python\n# LogoutView is already pre-created by Django\nfrom django.contrib.auth.views import LogoutView\n\n# Add a url to reach that view\npath('logout/', LoginView.as_view(), name='logout')\n\n# Include a link in a template\n<a> href=\"{% url 'logout' %}\">Logout</a>\n\n# After link is execute, the user will be logout and redirect to LOGOUT_REDIRECT_URL specified in your settings.py\n```\n\n#### Authentication : SignupView\n\n```python\n# Create a SignupView (that view is not created by default)\n# import sinupview form pre-created by Django\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.views.generic import CreateView\n\nclass SignupView(CreateView):\n    template_name = 'registration/signup.html'\n    form_class = UserCreationForm\n\n    def get_success_url(self):\n        return reverse(\"login\")\n```\n\n```html\n<!-- Create template: registration/signup.html -->\n{% extends \"base.html\" %} {% block content %}\n<form method=\"post\">\n  {% csrf_token %} {{ form }}\n  <button type=\"submit\">Signup</button>\n</form>\n{% endblock content %}\n```\n\n```python\n# Add a url to reach that view\nfrom posts.views import SignupView\n\npath('signup/', SignupView.as_view(), name='signup')\n```\n\n```python\n# Optional: Customize the UserCreationForm\n# (forms.py)\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.forms import UserCreationForm\n\nUser = get_user_model()\nclass CustomUserCreationForm(UserCreattionForm):\n    class Meta:\n        model = User\n        fields = ['username']\n        fields_classes = {'username': UsernameField}\n```\n\n#### Optional pre-created Authentication routes\n\n```python\n# urls.py\nurlpatterns += path('', include('django.contrib.auth.urls'))\n# /login, /lougout, /signup, etc.\n```\n\n#### Template Authentication helpers\n\n```html\n<!-- Authentication links -->\n<a href=\"{% url 'login' %}\">Login</a>\n<a href=\"{% url 'signup' %}\">Signup</a>\n<a href=\"{% url 'logout' %}\">Logout</a>\n\n<!-- Check if user login -->\n{% if request.user.is_authenticated %} Logged in as: {{ request.user.username }}\n{% endif %}\n```\n\n#### Authorization: LoginRequiredMixin and login_required\n\n```python\nfrom django.contrib.auth.mixins import LoginRequiredMixin\n\n# Restrict views to auth user only (views.py)\nclass PostsCreateView(LoginRequiredMixin, generic.CreateView):\n    ...\n    ...\n\nfrom django.contrib.auth.decorators import login_required\n\n@login_required(login_url='/login')\ndef search_page(request):\n    ...\n    ...\n```\n\n#### Manual Authentication , Login and Logout\n\n```python\nfrom django.contrib.auth import authenticate, login\n\ndef login_page(request):\n    if request.method == \"POST\":\n        username = request.POST.get(\"username\")\n        password = request.POST.get(\"password\")\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect(\"index\")\n\nreturn render(request, \"registration/login.html\", {})\n\ndef logout_page(request):\n    logout(request)\n    return redirect(\"index\")\n```\n\n#### User Change password\n\n```python\n# set_password will hash the password\nuser.set_password('raw password')\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Create Custom Accounts Model",
      "level": 2,
      "cards": [
        {
          "title": "Create Custom Accounts Model",
          "body": "```python\n~$ python manage.py startapp accounts\n```",
          "footer": "```python\nINSTALLED_APPS = [ … ,\n'accounts.apps.AccountsConfig',\n]\n.\n.\n.\nAUTH_USER_MODEL = 'accounts.User'\n```\n```python\nfrom django.db import models\nfrom django.contrib.auth.models import BaseUserManager, AbstractBaseUser, PermissionsMixin\nclass UserManager(BaseUserManager):\ndef create_user(self, username, email, password=None, **extra_fields):\nif not username:\nraise ValueError('Users must have an username')\nif not email:\nraise ValueError('Users must have an email')\nuser = self.model(email=email, **extra_fields)\nuser.set_password(password)\nuser.save(using=self._db)\nreturn user\ndef create_superuser(self, username,  email, password=None, **extra_fields):\nextra_fields.setdefault('is_staff', True)\nextra_fields.setdefault('is_superuser', True)\nextra_fields.setdefault('is_active', True)\nuser = self.create_user(username, email, password=password, **extra_fields)\nuser.save(using=self._db)\nreturn user\nclass User(AbstractBaseUser, PermissionsMixin):\nusername = models.CharField(verbose_name='Username', max_length=255, unique=True)\nemail = models.EmailField(verbose_name='email', max_length=255, unique=True)\nphone = models.BigIntegerField(verbose_name='Phone Number', unique=True, blank=True, null=True)\nis_active = models.BooleanField(default=True, verbose_name=\"is_active\")\nis_staff = models.BooleanField(default=False, verbose_name=\"is_staff\")\nis_superuser = models.BooleanField(default=False, verbose_name=\"is_superuser\")\nobjects = UserManager()\nUSERNAME_FIELD = 'username'  # or 'email' or 'phone'\nREQUIRED_FIELDS = ['username', 'email']\ndef __str__(self):\nreturn self.username\nclass Meta:\nverbose_name = \"User\"\nverbose_name_plural = \"Users\"\n```\n```python\nfrom django import forms\nfrom django.contrib.auth.forms import ReadOnlyPasswordHashField\nfrom django.core.exceptions import ValidationError\nfrom accounts.models import User\nfrom django.utils.translation import gettext_lazy as _\nclass UserCreationForm(forms.ModelForm):\npassword1 = forms.CharField(label='Password', widget=forms.PasswordInput)\npassword2 = forms.CharField(label='Password confirmation', widget=forms.PasswordInput)\nclass Meta:\nmodel = User\nfields = ('username', 'email', 'phone', 'is_active', 'is_staff')\ndef clean_password2(self):\npassword1 = self.cleaned_data.get(\"password1\")\npassword2 = self.cleaned_data.get(\"password2\")\nif password1 and password2 and password1 != password2:\nraise ValidationError(\"Passwords don't match\")\nreturn password2\ndef save(self, commit=True):\nuser = super().save(commit=False)\nuser.set_password(self.cleaned_data[\"password1\"])\nif commit:\nuser.save()\nreturn user\nclass UserChangeForm(forms.ModelForm):\npassword = ReadOnlyPasswordHashField()\nclass Meta:\nmodel = User\nfields = ('username', 'email', 'phone', 'is_active', 'is_staff')\ndef clean_password(self):\nreturn self.initial[\"password\"]\nclass LoginForm(forms.Form):\nemail = forms.CharField(\nwidget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Email'}), label='Email')\npassword = forms.CharField(\nwidget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}),label='Password')\nclass RegisterForm(forms.ModelForm):\npassword1 = forms.CharField(label='Password', widget=forms.PasswordInput(\nattrs={'class': 'form-control'}))\npassword2 = forms.CharField(label='Password confirmation',\nwidget=forms.PasswordInput(attrs={'class': 'form-control'}))\nclass Meta:\nmodel = User\nfields = ('username', 'email', 'phone')\nwidgets = {  # Optional\n'username': forms.TextInput(attrs={'class': 'form-control'}),\n'email': forms.EmailInput(attrs={'class': 'form-control'}),\n'phone': forms.NumberInput(\nattrs={'class': 'form-control', 'type': 'tel', 'maxlength': '11',\n'minlength': '11',  'onkeypress': 'return isNumber(event)', 'required': 'false'})}\ndef clean_password2(self):\npassword1 = self.cleaned_data.get(\"password1\")\npassword2 = self.cleaned_data.get(\"password2\")\nif password1 and password2 and password1 != password2:\nraise ValidationError(\"Passwords don't match\")\nelse:\nreturn password2\ndef save(self, commit=True):\nuser = super().save(commit=False)\nuser.set_password(self.cleaned_data[\"password1\"])\nif commit:\nuser.save()\nreturn user\nclass EditProfileForm(forms.ModelForm):\nclass Meta:\nmodel = User\nfields = ('username', 'email', 'phone')\nclass ChangePassword(forms.Form):\npassword1 = forms.CharField(label=_('Password'), widget=forms.PasswordInput(\nattrs={'class': 'form-control', 'placeholder': 'Password'}))\npassword2 = forms.CharField(label=_('Password confirmation'),\nwidget=forms.PasswordInput(\nattrs={'class': 'form-control', 'placeholder': 'Re-Enter Password'}))\ndef clean_password2(self):\npassword1 = self.cleaned_data.get(\"password1\")\npassword2 = self.cleaned_data.get(\"password2\")\nif password1 and password2 and password1 != password2:\nraise ValidationError(\"Passwords don't match\")\nelse:\nreturn password2\n```\n```python\nfrom django import forms\nfrom django.contrib import admin\nfrom django.contrib.auth.admin import UserAdmin as BaseUserAdmin\nfrom django.contrib.auth.forms import ReadOnlyPasswordHashField\nfrom django.core.exceptions import ValidationError\nfrom django.contrib.auth.models import Group\nfrom accounts.models import User\nclass UserCreationForm(forms.ModelForm):\npassword1 = forms.CharField(label='Password', widget=forms.PasswordInput)\npassword2 = forms.CharField(label='Password confirmation', widget=forms.PasswordInput)\nclass Meta:\nmodel = User\nfields = ('username', 'email', 'phone')\ndef clean_password2(self):\npassword1 = self.cleaned_data.get(\"password1\")\npassword2 = self.cleaned_data.get(\"password2\")\nif password1 and password2 and password1 != password2:\nraise ValidationError(\"Passwords don't match\")\nreturn password2\ndef save(self, commit=True):\nuser = super().save(commit=False)\nuser.set_password(self.cleaned_data[\"password1\"])\nif commit:\nuser.save()\nreturn user\nclass UserChangeForm(forms.ModelForm):\npassword = ReadOnlyPasswordHashField()\nclass Meta:\nmodel = User\nfields = ('username', 'email', 'phone', 'password', 'is_active', 'is_staff')\nclass UserAdmin(BaseUserAdmin):\nform = UserChangeForm\nadd_form = UserCreationForm\nlist_display = ('username', 'email', 'is_active', 'is_staff', 'is_superuser')\nlist_editable = ('is_staff', 'is_active')\nlist_filter = ('is_staff', 'groups')\nfieldsets = (\n(None, {'fields': ( 'username', 'email', 'phone', 'password')}),\n('Permissions', {'fields': ('is_staff',)}),\n('Group Permissions', {\n'fields': ('is_active', 'is_superuser', 'groups', 'user_permissions'),\n})\n)\nadd_fieldsets = (\n(None, {\n'classes': ('wide',),\n'fields': ('username', 'email', 'phone', 'password1', 'password2'),\n}),\n('Group Permissions', {\n'fields': ('is_active', 'is_superuser', 'groups', 'user_permissions'),\n})\n)\nsearch_fields = ('username', 'email', 'phone')\nordering = ('username', 'email', 'phone')\nfilter_horizontal = ('groups', 'user_permissions',)\nadmin.site.register(User, UserAdmin)\n```\n```python\nfrom django.urls import path\nfrom accounts import views\napp_name = 'accounts'\nurlpatterns = [\npath('login/', views.userLogin, name='login'),\npath('register/', views.userRegister, name='register'),\npath('logout/', views.LogoutPage, name='logout')\n]\n```\n```python\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, logout, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.translation import gettext_lazy as _\nfrom accounts.forms import LoginForm, RegisterForm\nfrom django.contrib import messages\nfrom accounts.models import User\ndef userRegister(request):\nform = RegisterForm()\nif request.method == 'POST':\nform = RegisterForm(request.POST)\nif form.is_valid():\ncd = form.cleaned_data\nif not User.objects.filter(email=cd['username']).exists():\nif not User.objects.filter(email=cd['email']).exists():\nuser = User.objects.create_user(\nusername=cd['username'], phone=cd['phone'], email=cd['email'], password=cd['password1'])\nuser.save()\nlogin(request, user)\nmessages.success(request, _(\"You successfully registered a user\"), extra_tags=\"success\")\nreturn redirect('app_name:home')\nelse:\nmessages.error(request, _(\"This Email is exists\"), extra_tags=\"warning\")\nelse:\nmessages.error(request, _(\"This Username is exists\"), extra_tags=\"warning\")\nelse:\nimport json\ner = json.loads(form.errors.as_json())\nfor e in er:\nmessages.error(request, er[e][0]['message'], 'warning')\nreturn render(request, 'accounts/register.html', {'form': form})\ndef userLogin(request):\nif not request.user.is_active:\nif request.method == 'POST':\nform = LoginForm(request.POST)\nif form.is_valid():\ncd = form.cleaned_data\nif User.objects.filter(username=cd['username']).exists():\nuser = authenticate(request, username=cd['username'], password=cd['password'])\nif user is not None:\nlogin(request, user)\nmessages.success(request, _(\"logged in successfully\"), extra_tags=\"success\")\nreturn redirect('app_name:home')\nelse:\nmessages.error(request, _(\"your username Or Password is wrong\"), extra_tags=\"warning\")\nelse:\nmessages.error(request, _(\"No account created with this username\"), extra_tags=\"warning\")\nreturn redirect('accounts:login')\nelse:\nmessages.error(request, _(\"Please enter your information correctly\"), extra_tags=\"warning\")\nelse:\nform = LoginForm()\nreturn render(request, 'accounts/login.html', {'form': form})\nelse:\nreturn redirect('app_name:home')\n@login_required()\ndef LogoutPage(request):\nlogout(request)\nmessages.success(request, _(\"You Logged Out successfully\"), extra_tags=\"success\")\nreturn redirect('app_name:home')\n```",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    },
    {
      "title": "Send Email",
      "level": 2,
      "cards": [
        {
          "title": "Send Email",
          "body": "```python\n# settings.py\nEMAIL_BACKEND = \"django.core.mail.backends.console.EmailBackend\"\n\n# Send email function\nfrom django.core.email import send_mail\n\nsend_mail(\n    subject = \"A new post has been created\",\n    message = \"Go to the web site to see the detail\",\n    from_email = \"test@test.com\",\n    recipient_list = [\"test2@text.com\"]\n)\n```",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    },
    {
      "title": "Signals",
      "level": 2,
      "cards": [
        {
          "title": "Signals",
          "body": "```python\n# models.py\nfrom django.db.models.signals import post_save, pre_save\n\ndef post_user_created_signal(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n# Launch the post_user_created_signal method if User model is save\npost_save.connect(post_user_created_signal, sender=User)\n```",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    },
    {
      "title": "Seed",
      "level": 2,
      "cards": [
        {
          "title": "Seed",
          "body": "```python\nfrom app_name.models import Product, Category\nfrom django.shortcuts import HttpResponse\nfrom faker import Faker\n\ndef seed(request):\n    Product.objects.all().delete()\n    Category.objects.all().delete()\n\n    category = Category()\n    category.name = \"Sports\"\n    category.save()\n\n    category = Category()\n    category.name = \"Home\"\n    category.save()\n\n    fake = Faker()\n    for _ in range(100):\n        product = Product()\n        product.name = fake.unique.word()\n        product.short_description = fake.sentence()\n        product.main_picture = fake.image_url()\n        product.price = fake.random_digit() * 10\n        product.category =  Category.objects.order_by('?').first()\n        product.save()\n\n    return HttpResponse('Seeded')\n```",
          "footer": "",
          "spanConfig": "",
          "isShortcutsCard": false
        }
      ],
      "subsections": []
    },
    {
      "title": "Environment Variables",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": ".env key/value file",
          "level": 3,
          "cards": [
            {
              "title": ".env key/value file",
              "body": "```python\n$ pip install python-decouple\n```",
              "footer": "Create a file name '.env' in the root folder of your project\n```python\nSECRET_KEY = 'your secret key'\nALLOWED_HOST = 127.0.0.1\n```\nIn settings.py change security related settings to point to the .env file\n```python\nfrom decouple import config\nSECRET_KEY = config('SECRET_KEY')\nALLOWED_HOST = config('ALLOWED_HOST')\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Asynchronous Tasks",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Django Celery Redis",
          "level": 3,
          "cards": [
            {
              "title": "Django Celery Redis",
              "body": "Celery is a distributed task queue that can collect, record, schedule, and perform tasks outside of your main program.",
              "footer": "#### Step 1: Install Celery Using pip\n\n```python\n~$ pip install celery       # pip install celery[redis]\n```\n\n#### Step 2. Add celery.py File in Your Project Module\n\n```python\n# your_project/celery.py\nimport os\nfrom celery import Celery\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE','your_project_name.settings')\napp = Celery('your_project_name')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()\n\n@app.task(bind=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')\n```\n\n#### Step 3: Import the Celery App to Django\n\n<small>To ensure that the Celery app is loaded when Django starts, add the following code into the `__init__.py` file\nthat sits on the project module beside on settings.py file.</small>\n\n```python\n# your_project/__init__.py\nfrom .celery import app as celery_app\n\n__all__ = ('celery_app',)\n```\n\n#### Step 4: Download and Run Redis as a Celery ‘broker’\n\n```python\n~$ redis-server\n```\n\n<small>You can test that Redis is working properly by typing this into your terminal:</small>\n\n```python\n~$ redis-cli ping\n```\n\nRedis should reply with PONG - try it!\n\n#### Step 5: Add Redis as a Dependency in the Django Project:\n\n```python\n~$ pip install redis\n```\n\n#### Step 6: Celery Stuff Configure to the Django Settings File\n\nOnce Redis is up, add the following code to your settings.py file and use celery-result\n\n```python\n~$ pip install django-celery-results\n```\n\nThis extension enables you to store Celery task results using the Django ORM.<br> It defines a single model\n(`django_celery_results.models.TaskResult`) used to store task results, and you can query this database table like any\nother Django model.\n\n```python\nINSTALLED_APPS = [\n                … ,\n                'django_celery_results',\n                ]\n\nBROKER_URL = 'redis://localhost:6379'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\nCELERY_RESULT_BACKEND = 'django-db'\nCELERY_CACHE_BACKEND = 'django-cache'\n\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n        'LOCATION': 'redis://localhost:6379/1',\n        \"OPTIONS\": {\n                    \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        }\n    }\n}\n```\n\n#### That’s it! You should now be able to use Celery with Django\n\nTest that the Celery worker is ready to receive tasks:\n\n```python\n~$ celery -A your_project_name worker -l info\n```\n\nThe most important task is: Always run a worker is needed to execute the celery task if any error throws from Redis like\nthis:\n\n```python\nAttributeError: 'str' object has no attribute 'items'\n```\n\n- the solution is: you have to use Redis old version",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Add a New Task",
          "level": 3,
          "cards": [
            {
              "title": "Add a New Task",
              "body": "",
              "footer": "#### Step 1: Add tasks.py File to Your Django App.\n\n```python\n# app_name/tasks.py\nfrom celery import shared_task\nfrom celery.decorators import task\nfrom time import sleep\n\n@task(name='my_first_task')\ndef my_first_task(duration):\n    sleep(duration)\n    return('first_task_done')\n\n@shared_task\ndef test_func():\n    for i in range(10):\n        print(i)\n    return 'End_OK'\n\n@shared_task\ndef adding(x, y):\n    time.sleep(10)\n    result = x + y\n    return result\n```\n\n#### Step 2: Assign Task to the Celery.\n\nYou need to assign a task to the celery. To assign this task you need to call this function with something different.\ncelery gives us two methods `delay()` and `apply_async()` to call task.\n\n```bash\n# Normal function call in python\n~$ my_first_task()\n\n# add task to the celery with function call\n~$ my_first_task.delay()\n```\n\nYou can send argument to the function using the delay method. <small>To check celery on the action open a separate tab\nof the terminal then go to the project directory (activate environment if you are using one) and run this command\nagain</small>\n\n```bash\n~$ celery -A your_project_name worker -l info\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Create a View in your App",
          "level": 3,
          "cards": [
            {
              "title": "Create a View in your App",
              "body": "```python\n# app_name/views.py\nfrom django.http import HttpResponse\nfrom app_name.tasks import my_first_task, test_func, adding\n\ndef index(request):\n    my_first_task.delay(10)\n    result = adding.delay(x=4, y=5)\n    return HttpResponse(f'response done. {result}')\n\ndef test(request):\n    test_func.delay()\n    return HttpResponse(\"Done\")\n```",
              "footer": "#### Then call the view from your app URL\n\n```python\n# app_name/urls.py\nfrom django.urls import path\nfrom app_name.views import index, test\nurlpatterns = [\n    path('celery-index/', index, name='celery_index_url'),\n    path('celery-test/', test, name='celery_test_url'),\n]\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        },
        {
          "title": "Celery In Production Using Supervisor",
          "level": 3,
          "cards": [
            {
              "title": "Celery In Production Using Supervisor",
              "body": "",
              "footer": "#### Step 1: Install Supervisor on Ubuntu Server\n\n```bash\n~$ sudo apt-get install supervisor\n```\n\n#### Step 2: Add .conf File in Supervisor\n\n```bash\n~$ sudo nano /etc/supervisor/conf.d/app_name.conf\n```\n\n`app_name` can be anything you like, it should be similar to your project name.\n\n#### Step 3: Add some Configure in app_name.conf\n\n```bash\n[program:your_app_name]\ncommand=/path/to/env/bin/celery worker -A your_project_name --loglevel=INFO\ndirectory=/path/to/workflow/your_project_name/\nuser=www-data\nautostart=true\nautorestart=true\nstdout_logfile=/path/to/workflow/your_project_name/logs/celeryd.log\nredirect_stderr=true\n```\n\nDescribe the configure file:\n\n```bash\n[program:your_app_name]\n#The name of your supervisord program\n\ncommand=/path/to/env/bin/celery worker -A your_project_name --loglevel=INFO\n#Set full path to celery program if using virtualenv\n\ndirectory=/path/to/workflow/your_project_name/\n#The directory to your Django project\n\nuser=www-data\n#The web server has to be run under a specific user. That user must exist.\n\nautostart=true\n#If true, this program will start automatically when supervisord is started\n\nautorestart=true\n#May be one of false, unexpected, or true. If false, the process will never be autorestarted. If unexpected, the process will be restart when the program exits with an exit code that is not one of the exit codes associated with this process’ configuration (see exitcodes). If true, the process will be unconditionally restarted when it exits, without regard to its exit code.\n\nstdout_logfile=/path/to/workflow/your_project_name/logs/celeryd.log\n#Put process stdout output in this file\n\nredirect_stderr=true\n#If true, cause the process’ stderr output to be sent back to supervisord on its stdout file descriptor (in UNIX shell terms, this is the equivalent of executing /the/program 2>&1).\n```\n\n#### Step 4: Inform Configuration to the Server\n\nAfter adding a new program, we should run the following two commands, to inform the server to reread the configuration\nfiles and to apply any changes.\n\n```python\n~$ sudo supervisorctl reread\n~$ sudo supervisorctl update\n```\n\n#### Managing Supervisor App\n\n```bash\n~$ sudo supervisorctl\n```\n\nYou will be greeted with a list of the registered processes. You will see a process called `your_app_name` with a\n`RUNNING` status.\n\n```bash\nyour_app_name                 RUNNING   pid 6853, uptime 0:22:30\nsupervisor>\n```\n\nType `help` for a list of available commands.\n\n```bash\nsupervisor> help\ndefault commands (type help <topic>):\n=====================================\nadd    exit      open  reload  restart   start   tail\navail  fg        pid   remove  shutdown  status  update\nclear  maintail  quit  reread  signal    stop    version\n```\n\nIn a nutshell, we can `start`, `stop` and `restart` programs bypassing the program name as an argument to the respective\ncommand. We can also take a look at the program output with the `tail` command. Once you are finished, you can `quit`.\n\n```bash\n~$ supervisor> quit\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    },
    {
      "title": "Deployment Django in Server",
      "level": 2,
      "cards": [],
      "subsections": [
        {
          "title": "Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu server",
          "level": 3,
          "cards": [
            {
              "title": "Set Up Django with Postgres, Nginx, and Gunicorn on Ubuntu server",
              "body": "",
              "footer": "#### Step 1 — Installing the Packages from the Ubuntu Repositories\n\n```bash\nsudo apt update\nsudo apt install python3-venv python3-dev libpq-dev postgresql postgresql-contrib nginx curl\n```\n\n#### Step 2 — Creating the PostgreSQL Database and User\n\n```bash\nsudo -u postgres psql\n```\n\n- First, create a database for your project:\n\n```bash\npostgres=# CREATE DATABASE myproject;\n```\n\n- Next, create a database user for our project. Make sure to select a secure password:\n\n```bash\npostgres=# CREATE USER myprojectuser WITH PASSWORD 'password';\n```\n\n- Afterwards, you’ll modify a few of the connection parameters for the user that you just created\n\n```bash\npostgres=# ALTER ROLE myprojectuser SET client_encoding TO 'utf8';\npostgres=# ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';\npostgres=# ALTER ROLE myprojectuser SET timezone TO 'UTC';\n```\n\n- Now, you can give the new user access to administer the new database:\n\n```bash\npostgres=# GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;\n```\n\n- When you are finished, exit out of the PostgreSQL prompt by typing:\n\n```bash\npostgres=# \\q\n```\n\n#### Step 3 — Creating a Python Virtual Environment for your Project\n\n- thin the project directory, create a Python virtual environment by typing:\n\n```bash\nmkdir ~/myprojectdir\ncd ~/myprojectdir\n```\n\n- Within the project directory, create a Python virtual environment by typing:\n\n```bash\npython3 -m venv myprojectenv\n```\n\n- Before installing your project’s Python requirements, you will need to activate the virtual environment. You can do\n  that by typing:\n\n```bash\nsource myprojectenv/bin/activate\n```\n\n- With your virtual environment active, install Django, Gunicorn, and the psycopg2 PostgreSQL adaptor with the local\n  instance of pip\n\n```bash\n(myprojectenv)$ pip install django gunicorn psycopg2-binary\n```\n\n#### Step 4 — Creating and Configuring a New Django Project\n\n- With your Python components installed, you can now create the actual Django project files.\n\n```bash\n(myprojectenv)$ django-admin startproject myproject ~/myprojectdir\n```\n\n- The first thing you should do with your newly created project files is adjust the settings. Open the settings file in\n  your text editor:\n\n```bash\n(myprojectenv)$ nano ~/myprojectdir/myproject/settings.py\n```\n\n- Start by locating the ALLOWED_HOSTS directive.\n\n```python\n# ~/myprojectdir/myproject/settings.py\nALLOWED_HOSTS = ['your_server_domain_or_IP', 'second_domain_or_IP', . . ., 'localhost']\n```\n\n- Next, find the section that configures database access. It will start with DATABASES. The configuration in the file is\n  for a SQLite database.\n\n```python\n. . .\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': 'myproject',\n        'USER': 'myprojectuser',\n        'PASSWORD': 'password',\n        'HOST': 'localhost',\n        'PORT': '',\n    }\n}\n. . .\n```\n\n- Next, move down to the bottom of the file and add a setting indicating where the static files should be placed.\n\n```python\n. . .\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nimport os\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static/')\n```\n\n#### Step 5 — Completing Initial Project Setup\n\n- Now, you can migrate the initial database schema to our PostgreSQL database using the management script:\n\n```bash\n(myprojectenv)$ ~/myprojectdir/manage.py makemigrations\n(myprojectenv)$ ~/myprojectdir/manage.py migrate\n```\n\n- Create an administrative user for the project by typing:\n\n```bash\n(myprojectenv)$ ~/myprojectdir/manage.py createsuperuser\n```\n\n- You can collect all of the static content into the directory location that you configured by typing:\n\n```bash\n(myprojectenv)$ ~/myprojectdir/manage.py collectstatic\n```\n\n#### Step 6 — Testing Gunicorn’s Ability to Serve the Project\n\n```bash\n(myprojectenv)$ cd ~/myprojectdir\n(myprojectenv)$ gunicorn --bind 0.0.0.0:8000 myproject.wsgi\n```\n\n- You’re now finished configuring your Django application. You can back out of our virtual environment by typing:\n\n```bash\n(myprojectenv)$ deactivate\n```\n\n#### Step 7 — Creating systemd Socket and Service Files for Gunicorn You have tested tha\n\n```bash\nsudo nano /etc/systemd/system/gunicorn.socket\n```\n\n- Inside, you will create a `[Unit]` section to describe the socket, a `[Socket]` section to define the socket location,\n  and an `[Install]` section to make sure the socket is created at the right time:\n\n```bash /etc/systemd/system/gunicorn.socket\n[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n\n[Install]\nWantedBy=sockets.target\n```\n\n- Save and close the file when you are finished.\n- Next, create and open a systemd service file for Gunicorn with sudo privileges in your text editor. The service\n  filename should match the socket filename with the exception of the extension:\n\n```bash\nsudo nano /etc/systemd/system/gunicorn.service\n```\n\n```bash\n[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\nUser=sammy\nGroup=www-data\nWorkingDirectory=/home/sammy/myprojectdir\nExecStart=/home/sammy/myprojectdir/myprojectenv/bin/gunicorn \\\n          --access-logfile - \\\n          --workers 3 \\\n          --bind unix:/run/gunicorn.sock \\\n          myproject.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- You can now start and enable the Gunicorn socket. This will create the socket file at /run/gunicorn.sock now and at\n  boot. When a connection is made to that socket, systemd will automatically start the gunicorn.service to handle it\n\n```bash\nsudo systemctl start gunicorn.socket\nsudo systemctl enable gunicorn.socket\n```\n\n#### Step 8 — Checking for the Gunicorn Socket File\n\n- Check the status of the process to find out whether it was able to start:\n\n```bash\nsudo systemctl status gunicorn.socket\n```\n\n- Next, check for the existence of the gunicorn.sock file within the /run directory:\n\n```bash\nfile /run/gunicorn.sock\n```\n\n#### Step 9 — Testing Socket Activation\n\n```bash\nsudo systemctl status gunicorn\n```\n\n- To test the socket activation mechanism, you can send a connection to the socket through curl by typing:\n\n```bash\ncurl --unix-socket /run/gunicorn.sock localhost\n```\n\n- You should receive the HTML output from your application in the terminal. This indicates that Gunicorn was started and\n  was able to serve your Django application. You can verify that the Gunicorn service is running by typing:\n\n```bash\nsudo systemctl status gunicorn\n```\n\n- Check your /etc/systemd/system/gunicorn.service file for problems. If you make changes to the\n  /etc/systemd/system/gunicorn.service file, reload the daemon to reread the service definition and restart the Gunicorn\n  process by typing\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart gunicorn\n```\n\n#### Step 10 — Configure Nginx to Proxy Pass to Gunicorn\n\n- Start by creating and opening a new server block in Nginx’s sites-available directory:\n\n```bash\nsudo nano /etc/nginx/sites-available/myproject\n```\n\n```bash\nserver {\n    listen 80;\n    server_name server_domain_or_IP;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        alias /home/sammy/myprojectdir/staticfiles/;\n    }\n\n    location /media {\n        autoindex on;\n        alias /home/sammy/myprojectdir/media/;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/run/gunicorn.sock;\n    }\n}\n```\n\n- Save and close the file when you are finished. Now, you can enable the file by linking it to the sites-enabled\n  directory:\n\n```bash\nsudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled\n```\n\n- Test your Nginx configuration for syntax errors by typing:\n\n```bash\nsudo nginx -t\n```\n\n- If no errors are reported, go ahead and restart Nginx by typing:\n\n```bash\nsudo systemctl restart nginx\n```\n\n- you need to open up your firewall to normal traffic on port 80\n\n```bash\nsudo ufw allow 'Nginx Full'\n```\n\nYou should now be able to go to your server’s domain or IP address to view your application.\n\n#### Step 11 — Troubleshooting Nginx and Gunicorn\n\n- Nginx Is Showing the Default Page Instead of the Django Application\n\n```bash\nsudo tail -F /var/log/nginx/error.log\n```\n\n- Django Is Displaying: “could not connect to server: Connection refused”\n\n```bash\nsudo systemctl status postgresql\n```\n\n- If it is not, you can start it and enable it to start automatically at boot (if it is not already configured to do so)\n  by typing:\n\n```bash\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n```\n\nIf you change Gunicorn socket or service files, reload the daemon and restart the process by typing:\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl restart gunicorn.socket gunicorn.service\n```\n\nIf you change the Nginx server block configuration, test the configuration and then Nginx by typing:\n\n```bash\nsudo nginx -t && sudo systemctl restart nginx\n```",
              "spanConfig": "",
              "isShortcutsCard": false
            }
          ],
          "subsections": []
        }
      ]
    }
  ]
}